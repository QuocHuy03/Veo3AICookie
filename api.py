import os
import json
import time
import threading
import re
import uuid
import random
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any, List, Tuple
from concurrent.futures import ThreadPoolExecutor, as_completed
import requests
import pandas as pd


API_URL = "http://62.171.131.164:5000"
GENERATE_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchAsyncGenerateVideoText"
GENERATE_IMAGE_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchAsyncGenerateVideoStartImage"
UPSCALE_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchAsyncGenerateVideoUpsampleVideo"
CHECK_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchCheckAsyncVideoGenerationStatus"
SESSION_URL = "https://labs.google/fx/api/auth/session"
UPLOAD_IMAGE_URL = "https://aisandbox-pa.googleapis.com/v1:uploadUserImage"

# User-Agent gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0 Safari/537.36"
]

# Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t
BROWSER_HEADERS = {
	"Accept": "application/json, text/plain, */*",
	"Accept-Language": "en-US,en;q=0.9,vi;q=0.8",
	"Accept-Encoding": "gzip, deflate, br",
	"Cache-Control": "no-cache",
	"Pragma": "no-cache",
	"Connection": "keep-alive"
}


# C√°c h√†m FFmpeg ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè v√¨ kh√¥ng c√≤n c·∫ßn thi·∫øt
# Gi·ªù ƒë√¢y t·∫£i tr·ª±c ti·∫øp file MP4 t·ª´ URL


def get_random_user_agent() -> str:
	"""L·∫•y User-Agent ng·∫´u nhi√™n"""
	return random.choice(USER_AGENTS)


def get_browser_headers() -> Dict[str, str]:
	"""T·∫°o headers gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t"""
	headers = BROWSER_HEADERS.copy()
	headers["User-Agent"] = get_random_user_agent()
	return headers


def get_api_headers(token: str) -> Dict[str, str]:
	"""T·∫°o headers cho API requests v·ªõi token"""
	header_token = token.strip()
	if header_token.lower().startswith("bearer "):
		header_token = header_token.split(" ", 1)[1]
	
	# Headers c∆° b·∫£n cho API - lo·∫°i b·ªè Origin ƒë·ªÉ tr√°nh xung ƒë·ªôt
	headers = {
		"Content-Type": "application/json",
		"Authorization": f"Bearer {header_token}",
		"User-Agent": get_random_user_agent(),
		"Accept": "application/json",
		"Accept-Language": "en-US,en;q=0.9",
		"Accept-Encoding": "gzip, deflate, br"
	}
	
	return headers


def get_session_config() -> Dict[str, Any]:
	"""T·∫°o c·∫•u h√¨nh session gi·∫£ l·∫≠p"""
	return {
		"verify": True,
		"allow_redirects": True,
		"timeout": (60, 300)  # (connect timeout, read timeout) - tƒÉng timeout l√™n 5 ph√∫t cho video generation
	}


def add_random_delay(min_delay: float = 0.1, max_delay: float = 0.5) -> None:
	"""Th√™m delay ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p h√†nh vi ng∆∞·ªùi d√πng th·∫≠t"""
	time.sleep(random.uniform(min_delay, max_delay))


def auto_retry_with_backoff(func, *args, max_retries: int = 3, base_delay: float = 1.0, 
                           max_delay: float = 60.0, backoff_factor: float = 2.0, 
                           retry_on_exceptions: tuple = (Exception,), **kwargs):
	"""
	T·ª± ƒë·ªông retry m·ªôt h√†m v·ªõi exponential backoff
	
	Args:
		func: H√†m c·∫ßn retry
		*args: Arguments cho h√†m
		max_retries: S·ªë l·∫ßn retry t·ªëi ƒëa
		base_delay: Delay c∆° b·∫£n (gi√¢y)
		max_delay: Delay t·ªëi ƒëa (gi√¢y)
		backoff_factor: H·ªá s·ªë tƒÉng delay
		retry_on_exceptions: Tuple c√°c exception c·∫ßn retry
		**kwargs: Keyword arguments cho h√†m
	
	Returns:
		K·∫øt qu·∫£ c·ªßa h√†m n·∫øu th√†nh c√¥ng
		
	Raises:
		Exception cu·ªëi c√πng n·∫øu h·∫øt s·ªë l·∫ßn retry
	"""
	last_exception = None
	
	for attempt in range(max_retries + 1):  # +1 v√¨ attempt ƒë·∫ßu ti√™n kh√¥ng ph·∫£i retry
		try:
			return func(*args, **kwargs)
		except retry_on_exceptions as e:
			last_exception = e
			
			if attempt < max_retries:
				# T√≠nh delay v·ªõi exponential backoff
				delay = min(base_delay * (backoff_factor ** attempt), max_delay)
				# Th√™m jitter ƒë·ªÉ tr√°nh thundering herd
				jitter = random.uniform(0.1, 0.3) * delay
				final_delay = delay + jitter
				
				print(f"üîÑ L·ªói l·∫ßn {attempt + 1}/{max_retries + 1}: {str(e)[:100]}...")
				print(f"‚è≥ Th·ª≠ l·∫°i sau {final_delay:.1f} gi√¢y...")
				time.sleep(final_delay)
			else:
				print(f"‚ùå ƒê√£ th·ª≠ {max_retries + 1} l·∫ßn nh∆∞ng v·∫´n l·ªói: {str(e)}")
				break
	
	# N·∫øu ƒë·∫øn ƒë√¢y th√¨ ƒë√£ h·∫øt s·ªë l·∫ßn retry
	raise last_exception


def http_post_json(url: str, payload: Dict[str, Any], token: str, proxy: Optional[Dict[str, str]] = None, max_retries: int = 5) -> Dict[str, Any]:
	headers = get_api_headers(token)
	session_config = get_session_config()
	
	# T·∫°o session v·ªõi c·∫•u h√¨nh gi·∫£ l·∫≠p
	session = requests.Session()
	session.headers.update(headers)
	
	for attempt in range(max_retries):
		try:
			# Th√™m delay ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p h√†nh vi ng∆∞·ªùi d√πng th·∫≠t
			if attempt > 0:
				# Delay l√¢u h∆°n khi retry
				add_random_delay(1.0, 3.0)
			else:
				add_random_delay(0.1, 0.5)
			
			# Th·ª≠ v·ªõi proxy tr∆∞·ªõc, n·∫øu l·ªói th√¨ th·ª≠ kh√¥ng proxy
			current_proxy = proxy
			if attempt > 0 and proxy:
				print(f"üîÑ L·∫ßn th·ª≠ {attempt + 1}: Th·ª≠ kh√¥ng proxy...")
				current_proxy = None
			
			resp = session.post(
				url, 
				data=json.dumps(payload), 
				proxies=current_proxy,
				**session_config
			)
			resp.raise_for_status()
			return resp.json()
			
		except (requests.exceptions.ProxyError, requests.exceptions.ConnectionError) as e:
			print(f"‚ùå L·ªói proxy/connection (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}): {e}")
			if attempt < max_retries - 1:
				print(f"üîÑ Th·ª≠ l·∫°i sau {2 ** attempt} gi√¢y...")
				time.sleep(2 ** attempt)
				continue
			else:
				raise
				
		except requests.exceptions.Timeout as e:
			print(f"‚è∞ Timeout (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}): {e}")
			if attempt < max_retries - 1:
				print(f"üîÑ Th·ª≠ l·∫°i sau {3 ** attempt} gi√¢y...")
				time.sleep(3 ** attempt)  # Delay l√¢u h∆°n cho timeout
				continue
			else:
				raise
				
		except requests.HTTPError as e:
			# Debug: In ra response chi ti·∫øt khi c√≥ l·ªói
			print(f"‚ùå L·ªói HTTP {e.response.status_code} (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}): {e.response.text}")
			
			# N·∫øu l√† l·ªói 500 v√† ch∆∞a h·∫øt s·ªë l·∫ßn th·ª≠, th·ª≠ l·∫°i
			if e.response.status_code == 500 and attempt < max_retries - 1:
				print(f"üîÑ Th·ª≠ l·∫°i sau {2 ** attempt} gi√¢y...")
				time.sleep(2 ** attempt)  # Exponential backoff
				continue
			
			# N·∫øu l√† l·ªói kh√°c ho·∫∑c ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠, raise exception
			if attempt == max_retries - 1:
				print(f"API Request failed after {max_retries} attempts")
				print(f"Request Headers: {dict(session.headers)}")
			raise



def http_download_mp4(url: str, output_path: str, proxy: Optional[Dict[str, str]] = None) -> None:
	"""T·∫£i tr·ª±c ti·∫øp file mp4 t·ª´ URL"""
	headers = get_browser_headers()
	session = requests.Session()
	session.headers.update(headers)
	
	with session.get(url, stream=True, timeout=120, proxies=proxy) as r:
		r.raise_for_status()
		with open(output_path, "wb") as f:
			for chunk in r.iter_content(chunk_size=1024 * 1024):
				if chunk:
					f.write(chunk)


def get_encoded_video(token: str, media_id: str, proxy: Optional[Dict[str, str]] = None) -> Optional[str]:
	"""L·∫•y encodedVideo t·ª´ mediaId sau khi upscale"""
	print(f"üöÄ DEBUG: get_encoded_video ƒë∆∞·ª£c g·ªçi!")
	print(f"üöÄ DEBUG: media_id: {media_id}")
	
	url = f"https://aisandbox-pa.googleapis.com/v1/media/{media_id}?clientContext.tool=PINHOLE"
	headers = get_api_headers(token)
	
	session = requests.Session()
	session.headers.update(headers)
	session_config = get_session_config()
	
	try:
		resp = session.get(url, proxies=proxy, **session_config)
		resp.raise_for_status()
		data = resp.json()
		
		# Tr√≠ch xu·∫•t encodedVideo
		video_data = data.get("video", {})
		encoded_video = video_data.get("encodedVideo")
		
		if encoded_video:
			print(f"‚úÖ ƒê√£ l·∫•y encodedVideo t·ª´ mediaId: {media_id[:20]}...")
			return encoded_video
		else:
			print(f"‚ùå Kh√¥ng t√¨m th·∫•y encodedVideo trong response")
			return None
			
	except Exception as e:
		print(f"‚ùå L·ªói l·∫•y encodedVideo: {e}")
		return None


def download_encoded_video(encoded_video: str, output_path: str) -> None:
	"""T·∫£i video t·ª´ encodedVideo string"""
	print(f"üöÄ DEBUG: download_encoded_video ƒë∆∞·ª£c g·ªçi!")
	print(f"üöÄ DEBUG: output_path: {output_path}")
	print(f"üöÄ DEBUG: encoded_video length: {len(encoded_video)}")
	
	try:
		import base64
		# Decode base64 encoded video
		video_data = base64.b64decode(encoded_video)
		
		# Ghi file video
		with open(output_path, 'wb') as f:
			f.write(video_data)
		
		print(f"‚úÖ ƒê√£ t·∫£i video t·ª´ encodedVideo: {output_path}")
		
	except Exception as e:
		print(f"‚ùå L·ªói t·∫£i video t·ª´ encodedVideo: {e}")
		raise


def delete_media(names: List[str], cookie_header_value: Optional[str], proxy: Optional[Dict[str, str]] = None, max_retries: int = 3) -> bool:
	"""G·ªçi API x√≥a media tr√™n labs.google. Tr·∫£ v·ªÅ True n·∫øu th√†nh c√¥ng.

	API: https://labs.google/fx/api/trpc/media.deleteMedia (POST)
	Body: {"json": {"names": ["<media_id>", ...]}}
	"""
	if not cookie_header_value:
		print("‚ö† B·ªè qua x√≥a media do thi·∫øu Cookie")
		return False
	
	url = "https://labs.google/fx/api/trpc/media.deleteMedia"
	headers = get_browser_headers()
	headers.update({
		"Accept": "application/json",
		"Content-Type": "application/json",
		"Cookie": cookie_header_value,
	})
	
	session = requests.Session()
	session.headers.update(headers)
	session_config = get_session_config()
	payload = {"json": {"names": names}}
	
	for attempt in range(max_retries):
		try:
			if attempt > 0:
				add_random_delay(0.5, 1.5)
			resp = session.post(url, data=json.dumps(payload), proxies=proxy, **session_config)
			resp.raise_for_status()
			print("üßπ ƒê√£ g·ª≠i y√™u c·∫ßu x√≥a media th√†nh c√¥ng")
			return True
		except requests.HTTPError as e:
			print(f"‚ùå X√≥a media l·ªói HTTP {e.response.status_code}: {e.response.text}")
			if e.response.status_code >= 500 and attempt < max_retries - 1:
				print("üîÑ Th·ª≠ x√≥a l·∫°i...")
				continue
			return False
		except Exception as e:
			print(f"‚ùå X√≥a media l·ªói: {e}")
			return False


def upload_image(token: str, image_path: str, proxy: Optional[Dict[str, str]] = None) -> str:
	"""Upload image v√† tr·∫£ v·ªÅ mediaGenerationId"""
	if not os.path.exists(image_path):
		raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file image: {image_path}")
	
	# ƒê·ªçc file image
	with open(image_path, "rb") as f:
		image_data = f.read()
	
	# Chuy·ªÉn ƒë·ªïi th√†nh base64
	import base64
	base64_data = base64.b64encode(image_data).decode('utf-8')
	
	# X√°c ƒë·ªãnh mime type
	mime_type = "image/jpeg"
	if image_path.lower().endswith('.png'):
		mime_type = "image/png"
	elif image_path.lower().endswith('.gif'):
		mime_type = "image/gif"
	elif image_path.lower().endswith('.webp'):
		mime_type = "image/webp"
	
	# T·∫°o session ID ng·∫´u nhi√™n
	session_id = f";{int(time.time() * 1000)}"
	
	payload = {
		"imageInput": {
			"aspectRatio": "IMAGE_ASPECT_RATIO_LANDSCAPE",
			"isUserUploaded": True,
			"mimeType": mime_type,
			"rawImageBytes": base64_data
		},
		"clientContext": {
			"sessionId": session_id,
			"tool": "ASSET_MANAGER"
		}
	}
	
	response = http_post_json(UPLOAD_IMAGE_URL, payload, token, proxy)
	
	# Tr√≠ch xu·∫•t mediaGenerationId
	media_gen_id = response.get("mediaGenerationId", {}).get("mediaGenerationId")
	if not media_gen_id:
		raise ValueError("Kh√¥ng t√¨m th·∫•y mediaGenerationId trong ph·∫£n h·ªìi upload")
	
	return media_gen_id


def upload_video(token: str, video_path: str, proxy: Optional[Dict[str, str]] = None) -> str:
	"""Upload video v√† tr·∫£ v·ªÅ mediaGenerationId - s·ª≠ d·ª•ng c√πng endpoint nh∆∞ng v·ªõi payload video"""
	print(f"üöÄ DEBUG: upload_video ƒë∆∞·ª£c g·ªçi!")
	print(f"üöÄ DEBUG: video_path: {video_path}")
	print(f"üöÄ DEBUG: video_path exists: {os.path.exists(video_path)}")
	
	if not os.path.exists(video_path):
		raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file video: {video_path}")
	
	# ƒê·ªçc file video
	with open(video_path, "rb") as f:
		video_data = f.read()
	
	# Chuy·ªÉn ƒë·ªïi th√†nh base64
	import base64
	base64_data = base64.b64encode(video_data).decode('utf-8')
	
	# X√°c ƒë·ªãnh mime type
	mime_type = "video/mp4"
	if video_path.lower().endswith('.mov'):
		mime_type = "video/quicktime"
	elif video_path.lower().endswith('.avi'):
		mime_type = "video/x-msvideo"
	elif video_path.lower().endswith('.webm'):
		mime_type = "video/webm"
	
	# T·∫°o session ID ng·∫´u nhi√™n
	session_id = f";{int(time.time() * 1000)}"
	
	# S·ª≠ d·ª•ng c√πng endpoint nh∆∞ng v·ªõi payload video (s·ª≠ d·ª•ng imageInput thay v√¨ videoInput)
	payload = {
		"imageInput": {
			"aspectRatio": "VIDEO_ASPECT_RATIO_LANDSCAPE",
			"isUserUploaded": True,
			"mimeType": mime_type,
			"rawImageBytes": base64_data
		},
		"clientContext": {
			"sessionId": session_id,
			"tool": "ASSET_MANAGER"
		}
	}
	
	response = http_post_json(UPLOAD_IMAGE_URL, payload, token, proxy)
	
	# Tr√≠ch xu·∫•t mediaGenerationId
	media_gen_id = response.get("mediaGenerationId", {}).get("mediaGenerationId")
	if not media_gen_id:
		raise ValueError("Kh√¥ng t√¨m th·∫•y mediaGenerationId trong ph·∫£n h·ªìi upload video")
	
	return media_gen_id


def generate_video(token: str, prompt: str, project_id: str, model_key: str = "veo_3_0_t2v_fast_ultra", aspect_ratio: str = "VIDEO_ASPECT_RATIO_LANDSCAPE", seed: Optional[int] = None, proxy: Optional[Dict[str, str]] = None) -> Tuple[Dict[str, Any], str]:
	"""Generate video v√† tr·∫£ v·ªÅ response c√πng v·ªõi scene_id ƒë∆∞·ª£c t·∫°o"""
	if seed is None:
		# ƒê·ªçc seed t·ª´ config, n·∫øu seed = 0 th√¨ random
		config = _load_config()
		config_seed = config.get("seed", 0)
		if config_seed == 0:
			seed = int(time.time()) % 65535
		else:
			seed = config_seed
	
	# T·∫°o scene_id ng·∫´u nhi√™n
	scene_id = str(uuid.uuid4())
	
	payload = {
		"clientContext": {
			"projectId": project_id,
			"tool": "PINHOLE",
			"userPaygateTier": "PAYGATE_TIER_TWO",
		},
		"requests": [
			{
				"aspectRatio": aspect_ratio,
				"seed": seed,
				"textInput": {"prompt": prompt},
				"videoModelKey": model_key,
				"metadata": {"sceneId": scene_id},
			}
		]
	}
	response = http_post_json(GENERATE_URL, payload, token, proxy)
	return response, scene_id


def generate_video_from_image(token: str, prompt: str, media_id: str, project_id: str, model_key: str = "veo_3_i2v_s_fast_ultra", aspect_ratio: str = "VIDEO_ASPECT_RATIO_LANDSCAPE", seed: Optional[int] = None, proxy: Optional[Dict[str, str]] = None) -> Tuple[Dict[str, Any], str]:
	"""Generate video t·ª´ image + prompt v√† tr·∫£ v·ªÅ response c√πng v·ªõi scene_id ƒë∆∞·ª£c t·∫°o"""
	if seed is None:
		# ƒê·ªçc seed t·ª´ config, n·∫øu seed = 0 th√¨ random
		config = _load_config()
		config_seed = config.get("seed", 0)
		if config_seed == 0:
			seed = int(time.time()) % 65535
		else:
			seed = config_seed
	
	# T·∫°o scene_id ng·∫´u nhi√™n
	scene_id = str(uuid.uuid4())
	
	payload = {
		"clientContext": {
			"projectId": project_id,
			"tool": "PINHOLE",
			"userPaygateTier": "PAYGATE_TIER_TWO"
		},
		"requests": [
			{
				"aspectRatio": aspect_ratio,
				"seed": seed,
				"textInput": {
					"prompt": prompt
				},
				"promptExpansionInput": {
					"prompt": prompt,
					"seed": seed,
					"templateId": "0TNlfC6bSF",
					"imageInputs": [
						{
							"mediaId": media_id,
							"imageUsageType": "IMAGE_USAGE_TYPE_UNSPECIFIED"
						}
					]
				},
				"videoModelKey": model_key,
				"startImage": {
					"mediaId": media_id
				},
				"metadata": {
					"sceneId": scene_id
				}
			}
		]
	}
	response = http_post_json(GENERATE_IMAGE_URL, payload, token, proxy)
	return response, scene_id


def upscale_video(token: str, video_media_id: str, project_id: str, scale: str = "1080p", aspect_ratio: str = "VIDEO_ASPECT_RATIO_LANDSCAPE", seed: Optional[int] = None, proxy: Optional[Dict[str, str]] = None) -> Tuple[Dict[str, Any], str]:
	"""Upscale video v√† tr·∫£ v·ªÅ response c√πng v·ªõi scene_id ƒë∆∞·ª£c t·∫°o"""
	if seed is None:
		# ƒê·ªçc seed t·ª´ config, n·∫øu seed = 0 th√¨ random
		config = _load_config()
		config_seed = config.get("seed", 0)
		if config_seed == 0:
			seed = int(time.time()) % 65535
		else:
			seed = config_seed
	
	# T·∫°o scene_id ng·∫´u nhi√™n
	scene_id = str(uuid.uuid4())
	
	# Ch·ªçn model key d·ª±a tr√™n scale
	if scale == "720p":
		model_key = "veo_2_720p_upsampler_8s"
	elif scale == "1080p":
		model_key = "veo_2_1080p_upsampler_8s"
	else:
		model_key = "veo_2_1080p_upsampler_8s"  # Default to 1080p
	
	# T·∫°o session ID ng·∫´u nhi√™n
	session_id = f";{int(time.time() * 1000)}"
	
	payload = {
		"clientContext": {
			"sessionId": session_id
		},
		"requests": [
			{
				"aspectRatio": aspect_ratio,
				"seed": seed,
				"videoInput": {
					"mediaId": video_media_id
				},
				"videoModelKey": model_key,
				"metadata": {
					"sceneId": scene_id
				}
			}
		]
	}
	response = http_post_json(UPSCALE_URL, payload, token, proxy)
	return response, scene_id


def extract_op_name(response_json: Dict[str, Any]) -> str:
	ops = response_json.get("operations", [])
	if not ops:
		raise ValueError("Kh√¥ng c√≥ operations trong ph·∫£n h·ªìi generate")
	operation = ops[0].get("operation", {})
	name = operation.get("name")
	if not name:
		raise ValueError("Kh√¥ng c√≥ operation.name trong ph·∫£n h·ªìi generate")
	return name


def poll_status(token: str, operation_name: str, scene_id: str, interval_sec: float = 3.0, timeout_sec: int = 1200, proxy: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
	deadline = time.time() + timeout_sec
	last_status = None
	while time.time() < deadline:
		payload = {
			"operations": [
				{
					"operation": {"name": operation_name},
					"sceneId": scene_id,
				}
			]
		}
		resp = http_post_json(CHECK_URL, payload, token, proxy)
		ops = resp.get("operations", [])
		if not ops:
			raise ValueError("Ph·∫£n h·ªìi status kh√¥ng c√≥ operations")
		status = ops[0].get("status")
		if status != last_status:
			print(f"Status: {status}")
			last_status = status
		if status == "MEDIA_GENERATION_STATUS_SUCCESSFUL":
			return resp
		if status in {"MEDIA_GENERATION_STATUS_FAILED", "MEDIA_GENERATION_STATUS_CANCELLED"}:
			raise RuntimeError(f"Media generation th·∫•t b·∫°i: {json.dumps(resp, ensure_ascii=False)}")
		time.sleep(interval_sec)
	raise TimeoutError("H·∫øt th·ªùi gian ch·ªù media generation")


def _extract_media_id_from_operation(operation: Dict[str, Any], search_paths: List[List[str]], debug_prefix: str) -> Optional[str]:
	"""H√†m chung ƒë·ªÉ tr√≠ch xu·∫•t mediaId t·ª´ operation v·ªõi c√°c ƒë∆∞·ªùng d·∫´n t√¨m ki·∫øm"""
	media_id = None
	
	for i, path in enumerate(search_paths):
		current = operation
		path_str = ".".join(path)
		
		try:
			for key in path:
				if isinstance(current, dict) and key in current:
					current = current[key]
				else:
					current = None
					break
			
			if current:
				media_id = current
				print(f"‚úÖ {debug_prefix} - Found mediaId at: {path_str}")
				break
		except Exception as e:
			continue
	
	return media_id


def extract_video_media_id(status_json: Dict[str, Any]) -> Optional[str]:
	"""Tr√≠ch xu·∫•t mediaId t·ª´ video generation response"""
	try:
		operations = status_json.get("operations", [])
		
		if operations:
			operation = operations[0]
			
			# ƒê∆∞·ªùng d·∫´n t√¨m ki·∫øm cho video generation
			search_paths = [
				["mediaGenerationId"],  # V·ªã tr√≠ 1: operation.mediaGenerationId
				["response", "mediaId"],  # V·ªã tr√≠ 2: operation.response.mediaId
				["operation", "mediaId"],  # V·ªã tr√≠ 3: operation.operation.mediaId
				["metadata", "mediaId"]   # V·ªã tr√≠ 4: operation.metadata.mediaId
			]
			
			media_id = _extract_media_id_from_operation(operation, search_paths, "Video mediaId")
			
			if media_id:
				return media_id
		
		print("‚ùå Kh√¥ng t√¨m th·∫•y mediaId trong video generation response")
		return None
	except Exception as e:
		print(f"‚ùå L·ªói tr√≠ch xu·∫•t video mediaId: {e}")
		return None


def extract_upscale_media_id(response_json: Dict[str, Any]) -> Optional[str]:
	"""Tr√≠ch xu·∫•t mediaId t·ª´ response upscale"""
	try:
		operations = response_json.get("operations", [])
		
		if operations:
			operation = operations[0]
			
			# ƒê∆∞·ªùng d·∫´n t√¨m ki·∫øm cho upscale response
			search_paths = [
				["mediaGenerationId"],  # V·ªã tr√≠ 1: operation.mediaGenerationId
				["metadata", "video", "mediaGenerationId"],  # V·ªã tr√≠ 2: operation.metadata.video.mediaGenerationId
				["response", "mediaId"]  # V·ªã tr√≠ 3: operation.response.mediaId (backup)
			]
			
			media_id = _extract_media_id_from_operation(operation, search_paths, "Upscale mediaId")
			
			if media_id:
				return media_id
		
		print("‚ùå Kh√¥ng t√¨m th·∫•y mediaId trong upscale response")
		return None
	except Exception as e:
		print(f"‚ùå L·ªói tr√≠ch xu·∫•t upscale mediaId: {e}")
		return None


def extract_fife_url(status_json: Dict[str, Any]) -> str:
	ops = status_json.get("operations", [])
	if not ops:
		raise ValueError("Kh√¥ng c√≥ operations trong ph·∫£n h·ªìi status")
	operation = ops[0].get("operation", {})
	metadata = operation.get("metadata", {})
	video = metadata.get("video", {})
	url = video.get("fifeUrl") or video.get("fife_url")
	if not url:
		raise ValueError("Kh√¥ng t√¨m th·∫•y fifeUrl trong ph·∫£n h·ªìi status")
	return url



def _load_config() -> Dict[str, Any]:
	"""ƒê·ªçc c·∫•u h√¨nh t·ª´ file config.json"""
	try:
		with open("config.json", "r", encoding="utf-8") as f:
			return json.load(f)
	except FileNotFoundError:
		print("‚ö† File config.json kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
		return {}
	except json.JSONDecodeError as e:
		print(f"‚ö† L·ªói ƒë·ªçc file config.json: {e}, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
		return {}
	except Exception as e:
		print(f"‚ö† L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc config.json: {e}, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
		return {}


def fetch_access_token_from_session(cookie_header_value: str, proxy: Optional[Dict[str, str]] = None) -> Optional[str]:
	# G·ªçi GET t·ªõi SESSION_URL k√®m Cookie ƒë·ªÉ l·∫•y access_token
	headers = get_browser_headers()
	headers.update({
		"Accept": "application/json",
		"Cookie": cookie_header_value,
	})
	
	# Th√™m delay ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p h√†nh vi ng∆∞·ªùi d√πng th·∫≠t
	add_random_delay(0.2, 0.8)
	
	session = requests.Session()
	session.headers.update(headers)
	session_config = get_session_config()
	
	resp = session.get(SESSION_URL, proxies=proxy, **session_config)
	resp.raise_for_status()
	try:
		data = resp.json()
	except ValueError:
		return None
	
	# Hi·ªÉn th·ªã th√¥ng tin user v√† th·ªùi gian h·∫øt h·∫°n
	user_info = data.get("user", {})
	user_name = user_info.get("name", "Unknown")
	user_email = user_info.get("email", "Unknown")
	expires = data.get("expires", "Unknown")
	
	# Chuy·ªÉn ƒë·ªïi th·ªùi gian h·∫øt h·∫°n sang gi·ªù Vi·ªát Nam
	expires_vn = "Unknown"
	if expires != "Unknown":
		try:
			# Parse th·ªùi gian UTC
			utc_time = datetime.fromisoformat(expires.replace('Z', '+00:00'))
			# Chuy·ªÉn sang gi·ªù Vi·ªát Nam (UTC+7)
			vn_time = utc_time.astimezone(timezone(timedelta(hours=7)))
			# Format theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
			expires_vn = vn_time.strftime("%d/%m/%Y %H:%M:%S (UTC+7)")
		except (ValueError, TypeError):
			expires_vn = expires
	
	print(f"ƒê√£ l·∫•y token t·ª´ session:")
	print(f"  User: {user_name}")
	print(f"  Email: {user_email}")
	print(f"  H·∫øt h·∫°n: {expires_vn}")
	
	token = data.get("access_token")
	if isinstance(token, str) and token:
		return token
	return None


def sanitize_filename(filename: str) -> str:
	"""L√†m s·∫°ch t√™n file ƒë·ªÉ tr√°nh k√Ω t·ª± kh√¥ng h·ª£p l·ªá"""
	# Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá cho t√™n file
	filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
	# Lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng v√† tab
	filename = re.sub(r'[\n\r\t]', '_', filename)
	# Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
	filename = re.sub(r'\s+', ' ', filename)
	# Gi·ªõi h·∫°n ƒë·ªô d√†i t√™n file (Windows c√≥ gi·ªõi h·∫°n 255 k√Ω t·ª± cho ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß)
	# ƒê·ªÉ an to√†n, gi·ªõi h·∫°n ·ªü 100 k√Ω t·ª± cho t√™n file
	if len(filename) > 100:
		filename = filename[:100]
	return filename.strip()


def create_short_filename(stt: int, prompt: str) -> str:
	"""T·∫°o t√™n file ng·∫Øn g·ªçn t·ª´ STT v√† prompt"""
	# L·∫•y 50 k√Ω t·ª± ƒë·∫ßu c·ªßa prompt v√† l√†m s·∫°ch
	short_prompt = prompt[:50].strip()
	short_prompt = sanitize_filename(short_prompt)
	
	# T·∫°o t√™n file v·ªõi format: STT_short_description.mp4
	filename = f"{stt}_{short_prompt}.mp4"
	
	# ƒê·∫£m b·∫£o t√™n file kh√¥ng qu√° d√†i
	if len(filename) > 100:
		# N·∫øu v·∫´n qu√° d√†i, ch·ªâ l·∫•y STT v√† m·ªôt ph·∫ßn nh·ªè c·ªßa prompt
		short_prompt = short_prompt[:30]
		filename = f"{stt}_{short_prompt}.mp4"
	
	return filename


def read_excel_prompts(excel_file: str, require_image: bool = False) -> List[Tuple[int, str, Optional[str]]]:
	"""ƒê·ªçc file Excel v√† tr·∫£ v·ªÅ danh s√°ch (STT, PROMPT, IMAGE_PATH)"""
	try:
		df = pd.read_excel(excel_file)
		
		# Ki·ªÉm tra s·ªë c·ªôt
		if require_image:
			# Ch·∫ø ƒë·ªô Image + prompt c·∫ßn ƒë·ªß 3 c·ªôt
			if len(df.columns) < 3:
				print(f"\n‚ùå L·ªói: File Excel hi·ªán t·∫°i ch·ªâ c√≥ {len(df.columns)} c·ªôt")
				print("üìã Ch·∫ø ƒë·ªô Image + prompt c·∫ßn ƒë·ªß 3 c·ªôt:")
				print("   C·ªôt A: STT (1, 2, 3...)")
				print("   C·ªôt B: PROMPT (m√¥ t·∫£ video)")
				print("   C·ªôt C: IMAGE_PATH (ƒë∆∞·ªùng d·∫´n file image)")
				print("\nüí° H∆∞·ªõng d·∫´n:")
				print("   1. M·ªü file Excel")
				print("   2. Th√™m c·ªôt C v·ªõi ti√™u ƒë·ªÅ 'IMAGE_PATH'")
				print("   3. ƒêi·ªÅn ƒë∆∞·ªùng d·∫´n file image cho t·ª´ng d√≤ng")
				print("   4. Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh")
				raise ValueError("File Excel thi·∫øu c·ªôt IMAGE_PATH. Vui l√≤ng th√™m c·ªôt C v·ªõi ƒë∆∞·ªùng d·∫´n image.")
			print("‚úì Ki·ªÉm tra Excel: ƒê·ªß 3 c·ªôt (STT, PROMPT, IMAGE_PATH)")
		else:
			# Ch·∫ø ƒë·ªô text-only c·∫ßn √≠t nh·∫•t 2 c·ªôt
			if len(df.columns) < 2:
				print(f"\n‚ùå L·ªói: File Excel hi·ªán t·∫°i ch·ªâ c√≥ {len(df.columns)} c·ªôt")
				print("üìã Ch·∫ø ƒë·ªô text-only c·∫ßn √≠t nh·∫•t 2 c·ªôt:")
				print("   C·ªôt A: STT (1, 2, 3...)")
				print("   C·ªôt B: PROMPT (m√¥ t·∫£ video)")
				raise ValueError("File Excel thi·∫øu c·ªôt PROMPT. Vui l√≤ng th√™m c·ªôt B v·ªõi prompt.")
			print("‚úì Ki·ªÉm tra Excel: ƒê·ªß 2 c·ªôt (STT, PROMPT)")
		
		prompts = []
		missing_images = []
		
		for index, row in df.iterrows():
			stt = row.iloc[0]  # C·ªôt A
			prompt = row.iloc[1]  # C·ªôt B
			image_path = row.iloc[2] if len(df.columns) > 2 else None  # C·ªôt C (n·∫øu c√≥)
			
			# B·ªè qua d√≤ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá
			if pd.isna(stt) or pd.isna(prompt):
				continue
			
			# Chuy·ªÉn ƒë·ªïi STT th√†nh int
			try:
				stt_int = int(stt)
			except (ValueError, TypeError):
				print(f"C·∫£nh b√°o: STT '{stt}' kh√¥ng h·ª£p l·ªá, b·ªè qua d√≤ng {index + 1}")
				continue
			
			# X·ª≠ l√Ω image_path
			image_path_str = None
			if not pd.isna(image_path) and str(image_path).strip():
				image_path_str = str(image_path).strip()
			
			# Ki·ªÉm tra image path n·∫øu y√™u c·∫ßu
			if require_image:
				if not image_path_str:
					missing_images.append(f"D√≤ng {index + 1} (STT {stt_int}): Thi·∫øu ƒë∆∞·ªùng d·∫´n image")
					continue
				if not os.path.exists(image_path_str):
					missing_images.append(f"D√≤ng {index + 1} (STT {stt_int}): File image kh√¥ng t·ªìn t·∫°i: {image_path_str}")
					continue
				if not image_path_str.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
					missing_images.append(f"D√≤ng {index + 1} (STT {stt_int}): File image kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: {image_path_str}")
					continue
			
			prompts.append((stt_int, str(prompt).strip(), image_path_str))
		
		# B√°o c√°o k·∫øt qu·∫£ ki·ªÉm tra
		if require_image and missing_images:
			print(f"\n‚ùå L·ªói ki·ªÉm tra Excel:")
			for error in missing_images:
				print(f"  {error}")
			raise ValueError(f"C√≥ {len(missing_images)} l·ªói trong file Excel. Vui l√≤ng s·ª≠a tr∆∞·ªõc khi ti·∫øp t·ª•c.")
		
		if require_image:
			print(f"‚úì Ki·ªÉm tra Excel: T·∫•t c·∫£ {len(prompts)} d√≤ng ƒë·ªÅu c√≥ image h·ª£p l·ªá")
		else:
			print(f"‚úì Ki·ªÉm tra Excel: ƒê√£ ƒë·ªçc {len(prompts)} prompt")
		
		return prompts
		
	except FileNotFoundError:
		print(f"\n‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file Excel: {excel_file}")
		exit(1)
	except ValueError as e:
		print(f"\n‚ùå L·ªói: {e}")
		exit(1)
	except Exception as e:
		print(f"\n‚ùå L·ªói ƒë·ªçc file Excel: {e}")
		exit(1)

