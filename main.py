import sys
import os
import json
import re
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from PyQt5.QtWidgets import (QApplication, QMainWindow, QTabWidget, QWidget, 
                             QVBoxLayout, QHBoxLayout, QPushButton, 
                             QTableWidget, QTableWidgetItem, QLabel, QLineEdit, 
                             QTextEdit, QComboBox, QSpinBox, QFileDialog, QMessageBox,
                             QDialog, QFormLayout, QGroupBox,
                             QProgressBar, QCheckBox, QFrame)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QFont
import pandas as pd
import requests
from api import *

def create_styled_messagebox(parent, title, message, icon=QMessageBox.Information):
    """T·∫°o QMessageBox v·ªõi styling ƒë∆°n gi·∫£n"""
    msg = QMessageBox(parent)
    msg.setWindowTitle(title)
    msg.setText(message)
    msg.setIcon(icon)
    msg.setStyleSheet("""
        QMessageBox {
            background-color: white;
            font-family: "Segoe UI";
            font-size: 12px;
        }
        QMessageBox QPushButton {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-weight: bold;
            min-width: 80px;
        }
        QMessageBox QPushButton:hover {
            background-color: #0056b3;
        }
    """)
    return msg

class ProcessingResultDialog(QDialog):
    """Dialog hi·ªÉn th·ªã k·∫øt qu·∫£ x·ª≠ l√Ω video chuy√™n nghi·ªáp"""
    def __init__(self, results, parent=None):
        super().__init__(parent)
        self.setWindowTitle("K·∫øt qu·∫£ x·ª≠ l√Ω Video")
        self.setModal(True)
        self.resize(500, 400)
        
        successful = [r for r in results if r[2]]
        failed = [r for r in results if not r[2]]
        
        self.init_ui(successful, failed, results)
        
    def init_ui(self, successful, failed, all_results):
        layout = QVBoxLayout()
        
        # Header v·ªõi icon v√† title
        header_layout = QHBoxLayout()
        
        # Icon success/failure
        icon_label = QLabel()
        if len(failed) == 0:
            icon_label.setText("‚úÖ")
            icon_label.setStyleSheet("font-size: 48px; color: #28a745;")
        else:
            icon_label.setText("‚ö†Ô∏è")
            icon_label.setStyleSheet("font-size: 48px; color: #ffc107;")
        
        header_layout.addWidget(icon_label)
        
        # Title v√† stats
        title_layout = QVBoxLayout()
        title_label = QLabel("X·ª≠ l√Ω Video Ho√†n th√†nh!")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 20px;
                font-weight: bold;
                color: #333;
            }
        """)
        title_layout.addWidget(title_label)
        
        stats_label = QLabel(f"üìä Th√†nh c√¥ng: {len(successful)} | ‚ùå Th·∫•t b·∫°i: {len(failed)}")
        stats_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #666;
            }
        """)
        title_layout.addWidget(stats_label)
        
        header_layout.addLayout(title_layout)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # Progress bar t·ªïng quan
        progress_frame = QFrame()
        progress_frame.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border-radius: 8px;
                padding: 10px;
                margin: 10px 0;
            }
        """)
        progress_layout = QVBoxLayout()
        
        progress_label = QLabel("Ti·∫øn ƒë·ªô ho√†n th√†nh:")
        progress_label.setStyleSheet("font-weight: bold; color: #333;")
        progress_layout.addWidget(progress_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, len(all_results))
        self.progress_bar.setValue(len(successful))
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                text-align: center;
                background-color: white;
                height: 25px;
            }
            QProgressBar::chunk {
                background-color: #28a745;
                border-radius: 3px;
            }
        """)
        progress_layout.addWidget(self.progress_bar)
        
        progress_frame.setLayout(progress_layout)
        layout.addWidget(progress_frame)
        
        # Chi ti·∫øt k·∫øt qu·∫£
        details_group = QGroupBox("Chi ti·∫øt k·∫øt qu·∫£")
        details_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
                font-family: "Roboto", "Open Sans", "Segoe UI";
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        details_layout = QVBoxLayout()
        
        # Scrollable results
        scroll_area = QTextEdit()
        scroll_area.setReadOnly(True)
        scroll_area.setMaximumHeight(150)
        scroll_area.setStyleSheet("""
            QTextEdit {
                border: 1px solid #e0e0e0;
                border-radius: 5px;
                background-color: white;
                font-family: "Roboto", "Open Sans", "Segoe UI";
                font-size: 12px;
                padding: 5px;
            }
        """)
        
        # Add results to text area
        result_text = ""
        for stt, prompt, success, result in all_results:
            if success:
                result_text += f"‚úÖ STT {stt}: {result}\n"
            else:
                result_text += f"‚ùå STT {stt}: {result}\n"
        
        scroll_area.setPlainText(result_text)
        details_layout.addWidget(scroll_area)
        
        details_group.setLayout(details_layout)
        layout.addWidget(details_group)
        
        # Buttons
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        
        self.close_btn = QPushButton("ƒê√≥ng")
        self.close_btn.setStyleSheet("""
            QPushButton {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
        """)
        self.close_btn.clicked.connect(self.accept)
        button_layout.addWidget(self.close_btn)
        
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
        # Set dialog style
        self.setStyleSheet("""
            QDialog {
                background-color: #ffffff;
                border-radius: 10px;
            }
        """)

class VideoMergeThread(QThread):
    """Thread ƒë·ªÉ gh√©p video kh√¥ng block UI"""
    progress_updated = pyqtSignal(int, str)  # progress, message
    log_updated = pyqtSignal(str)  # log message
    finished = pyqtSignal(bool, str)  # success, message
    
    def __init__(self, video_paths, output_path, mute_audio=False):
        super().__init__()
        self.video_paths = video_paths
        self.output_path = output_path
        self.mute_audio = mute_audio
        
    def run(self):
        try:
            self.log_updated.emit(f"üöÄ B·∫Øt ƒë·∫ßu gh√©p {len(self.video_paths)} video...")
            self.progress_updated.emit(10, "ƒêang chu·∫©n b·ªã...")
            
            # Validate video files exist
            for i, video_path in enumerate(self.video_paths):
                if not os.path.exists(video_path):
                    self.log_updated.emit(f"‚ùå Video {i+1} kh√¥ng t·ªìn t·∫°i: {video_path}")
                    self.finished.emit(False, f"Video {i+1} kh√¥ng t·ªìn t·∫°i: {video_path}")
                    return
            
            self.log_updated.emit("‚úÖ T·∫•t c·∫£ video files h·ª£p l·ªá")
            self.progress_updated.emit(20, "ƒêang chu·∫©n b·ªã FFmpeg...")
            
            # Build FFmpeg command
            cmd = ["ffmpeg", "-y"]  # -y ƒë·ªÉ overwrite output file
            
            # Add input files
            for video_path in self.video_paths:
                cmd.extend(["-i", video_path])
            
            # Add filter complex for concatenation
            if self.mute_audio:
                # Only video concatenation, no audio
                filter_parts = []
                for i in range(len(self.video_paths)):
                    filter_parts.append(f"[{i}:v]")
                
                video_filter = f"{''.join(filter_parts)}concat=n={len(self.video_paths)}:v=1:a=0[outv]"
                cmd.extend(["-filter_complex", video_filter])
                cmd.extend(["-map", "[outv]"])
            else:
                # Both video and audio concatenation
                filter_parts = []
                for i in range(len(self.video_paths)):
                    filter_parts.append(f"[{i}:v][{i}:a]")
                
                filter_complex = f"{''.join(filter_parts)}concat=n={len(self.video_paths)}:v=1:a=1[outv][outa]"
                cmd.extend(["-filter_complex", filter_complex])
                cmd.extend(["-map", "[outv]", "-map", "[outa]"])
            
            # Output settings
            cmd.extend(["-c:v", "libx264", "-preset", "fast", "-crf", "23"])
            if not self.mute_audio:
                cmd.extend(["-c:a", "aac", "-b:a", "128k"])
            
            cmd.append(self.output_path)
            
            self.log_updated.emit("üìù Command: ********************************")
            self.progress_updated.emit(30, "ƒêang gh√©p video...")
            
            # Execute FFmpeg
            import subprocess
            import platform
            
            # ·∫®n c·ª≠a s·ªï CMD tr√™n Windows
            startupinfo = None
            if platform.system() == "Windows":
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                startupinfo.wShowWindow = subprocess.SW_HIDE
            
            result = subprocess.run(cmd, capture_output=True, text=True, startupinfo=startupinfo)
            
            if result.returncode == 0:
                self.progress_updated.emit(100, "Ho√†n th√†nh!")
                self.log_updated.emit("‚úÖ Gh√©p video th√†nh c√¥ng!")
                self.finished.emit(True, f"ƒê√£ gh√©p video th√†nh c√¥ng!\nFile: {self.output_path}")
            else:
                # Extract meaningful error from FFmpeg output
                error_lines = result.stderr.split('\n')
                meaningful_error = ""
                for line in error_lines:
                    if any(keyword in line.lower() for keyword in ['error', 'failed', 'invalid', 'cannot']):
                        meaningful_error += line + "\n"
                
                if not meaningful_error:
                    meaningful_error = result.stderr[:300] + "..."
                
                self.log_updated.emit(f"‚ùå L·ªói gh√©p video: {meaningful_error[:200]}...")
                self.finished.emit(False, f"L·ªói gh√©p video:\n{meaningful_error}")
                
        except FileNotFoundError:
            self.log_updated.emit("‚ùå Kh√¥ng t√¨m th·∫•y FFmpeg!")
            self.finished.emit(False, "Kh√¥ng t√¨m th·∫•y FFmpeg! Vui l√≤ng c√†i ƒë·∫∑t FFmpeg.")
        except Exception as e:
            self.log_updated.emit(f"‚ùå L·ªói: {str(e)}")
            self.finished.emit(False, f"L·ªói: {str(e)}")

class AddCookieDialog(QDialog):
    """Dialog ƒë·ªÉ th√™m cookie m·ªõi"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Add New Cookie")
        self.setModal(True)
        self.resize(600, 500)
        self.expires_data = "Unknown"  # Kh·ªüi t·∫°o expires data
        self.setStyleSheet("""
            QDialog {
                background-color: #f8f9fa;
                font-family: "Segoe UI";
            }
            QLabel {
                color: #333;
                font-weight: bold;
                font-size: 12px;
                margin-bottom: 5px;
            }
            QLineEdit, QTextEdit {
                padding: 8px;
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                background-color: white;
                font-size: 12px;
            }
            QLineEdit:focus, QTextEdit:focus {
                border-color: #2196F3;
            }
            QPushButton {
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                min-width: 120px;
            }
            QPushButton#testBtn {
                background-color: #4CAF50;
                color: white;
            }
            QPushButton#testBtn:hover {
                background-color: #45a049;
            }
            QPushButton#okBtn {
                background-color: #2196F3;
                color: white;
            }
            QPushButton#okBtn:hover {
                background-color: #1976D2;
            }
            QPushButton#cancelBtn {
                background-color: #f5f5f5;
                color: #666;
                border: 1px solid #ddd;
            }
        """)
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        header_label = QLabel("üîê Th√™m T√†i kho·∫£n M·ªõi")
        header_label.setStyleSheet("""
            QLabel {
                font-size: 13px;
                font-weight: bold;
                color: #2196F3;
                margin-bottom: 5px;
                padding: 5px;
                background-color: white;
                border-radius: 5px;
                border-left: 3px solid #2196F3;
            }
        """)
        layout.addWidget(header_label)
        
        # Form layout
        form_layout = QFormLayout()
        form_layout.setSpacing(15)
        form_layout.setLabelAlignment(Qt.AlignLeft)
        
        # Account name field
        name_label = QLabel("Account Name:")
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText("Nh·∫≠p t√™n t√†i kho·∫£n (v√≠ d·ª•: Account 1)")
        form_layout.addRow(name_label, self.name_edit)
        
        # Cookie field
        cookie_label = QLabel("Cookie:")
        self.cookie_edit = QTextEdit()
        self.cookie_edit.setPlaceholderText("D√°n cookie t·ª´ tr√¨nh duy·ªát v√†o ƒë√¢y...\n\nH∆∞·ªõng d·∫´n:\n1. M·ªü Developer Tools (F12)\n2. V√†o tab Application/Storage\n3. Copy cookie t·ª´ domain labs.google.com")
        form_layout.addRow(cookie_label, self.cookie_edit)
        
        layout.addLayout(form_layout)
        
        # Test section
        test_layout = QHBoxLayout()
        self.test_btn = QPushButton("Ki·ªÉm tra Cookie")
        self.test_btn.setObjectName("testBtn")
        self.test_btn.clicked.connect(self.test_cookie)
        test_layout.addWidget(self.test_btn)
        test_layout.addStretch()
        
        layout.addLayout(test_layout)
        
        # Status section
        self.status_label = QLabel("‚è≥ Ch∆∞a ki·ªÉm tra")
        self.status_label.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 12px;
                padding: 8px 12px;
                background-color: #f0f0f0;
                border-radius: 6px;
                border-left: 3px solid #999;
            }
        """)
        layout.addWidget(self.status_label)
        
        # Buttons
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        
        cancel_btn = QPushButton("Cancel")
        cancel_btn.setObjectName("cancelBtn")
        cancel_btn.clicked.connect(self.reject)
        
        ok_btn = QPushButton("Add")
        ok_btn.setObjectName("okBtn")
        ok_btn.clicked.connect(self.accept)
        
        button_layout.addWidget(cancel_btn)
        button_layout.addWidget(ok_btn)
        
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
    def test_cookie(self):
        """Ki·ªÉm tra cookie c√≥ h·ª£p l·ªá kh√¥ng"""
        cookie_text = self.cookie_edit.toPlainText().strip()
        if not cookie_text:
            self.status_label.setText("Vui l√≤ng nh·∫≠p cookie")
            self.status_label.setStyleSheet("""
                QLabel {
                    color: #c62828;
                    font-size: 12px;
                    padding: 8px 12px;
                    background-color: #ffebee;
                    border-radius: 6px;
                    border-left: 3px solid #f44336;
                }
            """)
            return
            
        # Disable button v√† hi·ªÉn th·ªã ƒëang x·ª≠ l√Ω
        self.test_btn.setEnabled(False)
        self.test_btn.setText("‚è≥ ƒêang x·ª≠ l√Ω...")
        self.status_label.setText("ƒêang ki·ªÉm tra cookie...")
        self.status_label.setStyleSheet("""
            QLabel {
                color: #1976d2;
                font-size: 12px;
                padding: 8px 12px;
                background-color: #e3f2fd;
                border-radius: 6px;
                border-left: 3px solid #2196f3;
            }
        """)
            
        try:
            # Test cookie b·∫±ng c√°ch g·ªçi session API
            headers = {
                "Accept": "application/json",
                "Cookie": cookie_text,
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
            
            response = requests.get("https://labs.google/fx/api/auth/session", 
                                  headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                user_info = data.get("user", {})
                user_name = user_info.get("name", "Unknown")
                user_email = user_info.get("email", "Unknown")
                
                # L·∫•y th·ªùi gian expires
                expires_str = data.get("expires", "")
                expires_display = "Unknown"
                if expires_str:
                    try:
                        # Parse th·ªùi gian UTC
                        utc_time = datetime.fromisoformat(expires_str.replace('Z', '+00:00'))
                        # Chuy·ªÉn sang gi·ªù Vi·ªát Nam (UTC+7)
                        from datetime import timezone, timedelta
                        vn_time = utc_time.astimezone(timezone(timedelta(hours=7)))
                        # Format theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
                        expires_display = vn_time.strftime("%d/%m/%Y %H:%M:%S")
                    except:
                        expires_display = expires_str
                
                self.status_label.setText(f"Done - {user_name} ({user_email})")
                self.status_label.setStyleSheet("""
                    QLabel {
                        color: #2e7d32;
                        font-size: 12px;
                        padding: 8px 12px;
                        background-color: #e8f5e8;
                        border-radius: 6px;
                        border-left: 3px solid #4caf50;
                    }
                """)
                
                # Auto fill name if empty
                if not self.name_edit.text():
                    self.name_edit.setText(user_name)
                    
                # Enable button v√† reset text
                self.test_btn.setEnabled(True)
                self.test_btn.setText("Ki·ªÉm tra Cookie")
                
                # L∆∞u expires v√†o data ƒë·ªÉ hi·ªÉn th·ªã trong table
                self.expires_data = expires_display
                    
                # Debug: Print cookie info for troubleshooting (·∫©n URL)
                print(f"Debug - Cookie contains email: {user_email}")
                print(f"Debug - Cookie length: {len(cookie_text)}")
                if "email" in cookie_text.lower():
                    print(f"Debug - Found 'email' in cookie")
                else:
                    print(f"Debug - No 'email' found in cookie")
                    
            else:
                self.status_label.setText(f"Error HTTP {response.status_code}")
                self.status_label.setStyleSheet("""
                    QLabel {
                        color: #c62828;
                        font-size: 12px;
                        padding: 8px 12px;
                        background-color: #ffebee;
                        border-radius: 6px;
                        border-left: 3px solid #f44336;
                    }
                """)
                
        except Exception as e:
            self.status_label.setText(f"Error: {str(e)}")
            self.status_label.setStyleSheet("""
                QLabel {
                    color: #c62828;
                    font-size: 12px;
                    padding: 8px 12px;
                    background-color: #ffebee;
                    border-radius: 6px;
                    border-left: 3px solid #f44336;
                }
            """)
            
        finally:
            # Lu√¥n enable l·∫°i button v√† reset text
            self.test_btn.setEnabled(True)
            self.test_btn.setText("Ki·ªÉm tra Cookie")
    
    def get_data(self):
        """L·∫•y d·ªØ li·ªáu t·ª´ dialog"""
        return {
            "name": self.name_edit.text().strip(),
            "cookie": self.cookie_edit.toPlainText().strip(),
            "status": self.status_label.text(),
            "expires": getattr(self, 'expires_data', 'Unknown'),
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

class VideoProcessingThread(QThread):
    """Thread ƒë·ªÉ x·ª≠ l√Ω video kh√¥ng block UI v·ªõi parallel processing v√† auto account distribution"""
    progress_updated = pyqtSignal(int, str)  # progress, message
    status_updated = pyqtSignal(str)  # status message for log
    finished = pyqtSignal(list)  # results
    
    def __init__(self, prompts, accounts_data, config, max_workers=3):
        super().__init__()
        self.prompts = prompts
        self.accounts_data = accounts_data  # Changed to support multiple accounts
        self.config = config
        self.max_workers = max_workers
        self.processed_count = 0
        self.total_count = len(prompts)
        self.current_account_index = 0  # For account rotation
        
    def get_next_account(self):
        """L·∫•y t√†i kho·∫£n ti·∫øp theo ƒë·ªÉ xoay v√≤ng"""
        if not self.accounts_data:
            return None
        
        account = self.accounts_data[self.current_account_index]
        self.current_account_index = (self.current_account_index + 1) % len(self.accounts_data)
        return account
    
    def process_single_video(self, prompt_data):
        """X·ª≠ l√Ω m·ªôt video ƒë∆°n l·∫ª v·ªõi auto account rotation"""
        stt, prompt, image_path = prompt_data
        
        print(f"DEBUG: STT {stt} - Processing video")
        print(f"DEBUG: STT {stt} - Image path: {image_path}")
        print(f"DEBUG: STT {stt} - Image exists: {image_path and os.path.exists(image_path) if image_path else False}")
        
        try:
            # L·∫•y t√†i kho·∫£n ti·∫øp theo ƒë·ªÉ xoay v√≤ng
            account_data = self.get_next_account()
            if not account_data:
                return (stt, prompt, False, "Kh√¥ng c√≥ t√†i kho·∫£n n√†o kh·∫£ d·ª•ng")
            
            # L·∫•y token t·ª´ cookie c·ªßa t√†i kho·∫£n ƒë∆∞·ª£c ch·ªçn
            cookie_header_value = account_data["cookie"]
            account_name = account_data.get("name", "Unknown")
            
            # Ki·ªÉm tra cookie c√≥ h·ª£p l·ªá kh√¥ng
            if not cookie_header_value or cookie_header_value.startswith("YOUR_COOKIE_HERE"):
                return (stt, prompt, False, f"Cookie kh√¥ng h·ª£p l·ªá cho {account_name}")
            
            token = fetch_access_token_from_session(cookie_header_value)
            
            if not token:
                return (stt, prompt, False, f"Kh√¥ng th·ªÉ l·∫•y token t·ª´ {account_name} - Cookie c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n")
            
            # T·∫°o output filename
            output_filename = create_short_filename(stt, prompt)
            output_path = os.path.join(self.config["output_dir"], output_filename)
            
            # Generate video - Auto-select model based on image presence and aspect ratio
            if image_path and os.path.exists(image_path):
                print("V√†o video r·ªìi n√® cu h·ªÅ")
                # Image-to-video: Select model based on aspect ratio
                if self.config["aspect_ratio"] == "VIDEO_ASPECT_RATIO_PORTRAIT":
                    model_key = "veo_3_i2v_s_fast_portrait_ultra"
                else:  # LANDSCAPE
                    model_key = "veo_3_i2v_s_fast_ultra"
                    
                self.status_updated.emit(f"STT {stt}: üì§ Uploading image...")
                media_id = upload_image(token, image_path)
                self.status_updated.emit(f"STT {stt}: üé¨ Generating video from image...")
                gen_resp, scene_id = generate_video_from_image(
                    token, prompt, media_id, 
                    self.config["project_id"], 
                    model_key,
                    self.config["aspect_ratio"]
                )
            else:
                print("V√†o text r·ªìi n√® cu h·ªÅ")
                # Text-to-video: Select model based on aspect ratio
                if self.config["aspect_ratio"] == "VIDEO_ASPECT_RATIO_PORTRAIT":
                    model_key = "veo_3_0_t2v_fast_portrait_ultra"
                else:  # LANDSCAPE
                    model_key = "veo_3_0_t2v_fast_ultra"
                    
                self.status_updated.emit(f"STT {stt}: üé¨ Generating video...")
                gen_resp, scene_id = generate_video(
                    token, prompt, 
                    self.config["project_id"], 
                    model_key,
                    self.config["aspect_ratio"]
                )
            
            # Poll status - s·ª≠ d·ª•ng h√†m poll_status t·ª´ main.py
            op_name = extract_op_name(gen_resp)
            self.status_updated.emit(f"STT {stt}: ‚è≥ Checking generation status...")
            
            try:
                # poll_status s·∫Ω t·ª± ƒë·ªông poll cho ƒë·∫øn khi SUCCESSFUL ho·∫∑c FAILED
                status_resp = poll_status(token, op_name, scene_id, interval_sec=2.0, timeout_sec=600)
                self.status_updated.emit(f"STT {stt}: ‚úÖ Status: SUCCESSFUL - Th√†nh c√¥ng, ƒëang t·∫£i...")
            except RuntimeError as e:
                self.status_updated.emit(f"STT {stt}: ‚ùå Status: FAILED - Th·∫•t b·∫°i!")
                return (stt, prompt, False, f"Generation failed: {str(e)}")
            except TimeoutError as e:
                self.status_updated.emit(f"STT {stt}: ‚è∞ Timeout - H·∫øt th·ªùi gian ch·ªù!")
                return (stt, prompt, False, f"Timeout: {str(e)}")
            except Exception as e:
                self.status_updated.emit(f"STT {stt}: ‚ùå L·ªói polling: {str(e)}")
                return (stt, prompt, False, f"Polling error: {str(e)}")
            
            # Download video
            self.status_updated.emit(f"STT {stt}: üì• Downloading video...")
            fife_url = extract_fife_url(status_resp)
            http_download_mp4(fife_url, output_path)
            
            self.status_updated.emit(f"STT {stt}: ‚úÖ Ho√†n th√†nh: {output_filename}")
            return (stt, prompt, True, output_filename)
            
        except Exception as e:
            self.status_updated.emit(f"STT {stt}: ‚ùå L·ªói: {str(e)}")
            return (stt, prompt, False, str(e))
    
    def run(self):
        try:
            account_count = len(self.accounts_data)
            self.progress_updated.emit(5, f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {self.total_count} video v·ªõi {self.max_workers} lu·ªìng v√† {account_count} t√†i kho·∫£n...")
            
            # S·ª≠ d·ª•ng ThreadPoolExecutor ƒë·ªÉ x·ª≠ l√Ω parallel
            results = []
            with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
                # Submit t·∫•t c·∫£ tasks
                future_to_prompt = {
                    executor.submit(self.process_single_video, prompt_data): prompt_data 
                    for prompt_data in self.prompts
                }
                
                # X·ª≠ l√Ω k·∫øt qu·∫£ khi ho√†n th√†nh
                for future in as_completed(future_to_prompt):
                    prompt_data = future_to_prompt[future]
                    stt, prompt, image_path = prompt_data
                    
                    try:
                        result = future.result()
                        results.append(result)
                        self.processed_count += 1
                        
                        # C·∫≠p nh·∫≠t progress
                        progress = int(5 + (self.processed_count / self.total_count) * 90)
                        status = "‚úì" if result[2] else "‚ùå"
                        self.progress_updated.emit(
                            progress, 
                            f"{status} STT {stt}: {prompt[:30]}... ({self.processed_count}/{self.total_count})"
                        )
                        
                    except Exception as e:
                        results.append((stt, prompt, False, str(e)))
                        self.processed_count += 1
                        
            # S·∫Øp x·∫øp results theo STT
            results.sort(key=lambda x: x[0])
            
            self.progress_updated.emit(100, f"‚úÖ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω {len(results)} video")
            self.finished.emit(results)
            
        except Exception as e:
            self.progress_updated.emit(0, f"‚ùå L·ªói: {str(e)}")
            self.finished.emit([])

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.accounts = []  # Danh s√°ch t√†i kho·∫£n
        self.init_ui()
        self.load_accounts()
        
    def init_ui(self):
        self.setWindowTitle("VEO 3 AI Video Generator - @huyit32")
        self.setGeometry(100, 100, 1200, 800)
        
        # Central widget v·ªõi tab widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout()
        central_widget.setLayout(layout)
        
        # Tab widget
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)
        
        # Tab 1: Qu·∫£n l√Ω t√†i kho·∫£n
        self.create_account_tab()
        
        # Tab 2: X·ª≠ l√Ω video
        self.create_processing_tab()
        
        # Tab 3: Gh√©p video
        self.create_merge_tab()
        
    def create_account_tab(self):
        """Tab 1: Qu·∫£n l√Ω t√†i kho·∫£n"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # Header
        header_layout = QHBoxLayout()
        add_btn = QPushButton("Add Cookie")
        add_btn.clicked.connect(self.add_cookie)
        add_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        refresh_btn = QPushButton("Refresh")
        refresh_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        refresh_btn.clicked.connect(self.refresh_accounts)
        
        header_layout.addWidget(add_btn)
        header_layout.addWidget(refresh_btn)
        header_layout.addStretch()
        
        layout.addLayout(header_layout)
        
        # Table
        self.account_table = QTableWidget()
        self.account_table.setColumnCount(5)
        self.account_table.setHorizontalHeaderLabels(["NAME", "EMAIL", "STATUS", "EXPIRES", "ACTION"])
        self.account_table.horizontalHeader().setStretchLastSection(True)
        # Styling table
        self.account_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border-radius: 3px;
                gridline-color: #e0e0e0;
                selection-background-color: #e3f2fd;
                alternate-background-color: #f8f9fa;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f0f0f0;
                font-size: 8px;
            }
            QTableWidget::item:selected {
                background-color: transparent;
                color: inherit;
            }
            QTableWidget::item:hover {
                background-color: transparent;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                color: #333;
                padding: 8px;
                border: none;
                border-right: 1px solid #e0e0e0;
                border-bottom: 1px solid #e0e0e0;
                font-weight: bold;
                font-size: 10px;
                text-align: center;
            }
            QHeaderView::section:first {
                border-top-left-radius: 8px;
            }
            QHeaderView::section:last {
                border-top-right-radius: 8px;
                border-right: none;
            }
        """)

        
        # Table properties
        self.account_table.setAlternatingRowColors(True)
        self.account_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.account_table.setSelectionMode(QTableWidget.NoSelection)
        self.account_table.verticalHeader().setVisible(False)
        self.account_table.setShowGrid(True)
        self.account_table.setEditTriggers(QTableWidget.NoEditTriggers)
        
        # Set minimum row height for better appearance
        self.account_table.verticalHeader().setDefaultSectionSize(40)
        
        layout.addWidget(self.account_table)
        
        # Load accounts
        self.load_accounts_to_table()
        
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "Qu·∫£n l√Ω T√†i kho·∫£n")
        
    def create_processing_tab(self):
        """Tab 2: X·ª≠ l√Ω video"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # Main layout v·ªõi t·ª∑ l·ªá c√¢n ƒë·ªëi
        main_layout = QHBoxLayout()
        
        # Left panel - C·∫•u h√¨nh (40%)
        left_panel = QWidget()
        left_panel.setMaximumWidth(500)
        left_layout = QVBoxLayout()
        
        # Group: Th√¥ng tin T√†i kho·∫£n
        account_group = QGroupBox("T√†i kho·∫£n (T·ª± ƒë·ªông chia t·∫£i)")
        account_layout = QVBoxLayout()
        
        self.account_info_label = QLabel("ƒêang t·∫£i danh s√°ch t√†i kho·∫£n...")
        self.account_info_label.setStyleSheet("""
            QLabel {
                color: #2196F3;
                font-size: 12px;
                font-weight: bold;
                padding: 8px;
                background-color: #e3f2fd;
                border-radius: 5px;
                border-left: 4px solid #2196F3;
            }
        """)
        account_layout.addWidget(self.account_info_label)
        
        # Auto refresh button
        refresh_accounts_btn = QPushButton("üîÑ L√†m m·ªõi danh s√°ch")
        refresh_accounts_btn.clicked.connect(self.refresh_accounts)
        refresh_accounts_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
        """)
        account_layout.addWidget(refresh_accounts_btn)
        
        # Test accounts button
        test_accounts_btn = QPushButton("üß™ Test T√†i kho·∫£n")
        test_accounts_btn.clicked.connect(self.test_accounts_ui)
        test_accounts_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 6px 12px;
                border-radius: 4px;
                font-weight: bold;
                font-size: 11px;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
        """)
        account_layout.addWidget(test_accounts_btn)
        
        account_group.setLayout(account_layout)
        left_layout.addWidget(account_group)
        
        # Group: C·∫•u h√¨nh Video
        config_group = QGroupBox("C·∫•u h√¨nh Video")
        config_layout = QFormLayout()
        
        self.project_id_edit = QLineEdit("66a1a7a3-c9d9-4c42-a07e-44f2baecf60b")
        config_layout.addRow("Project ID:", self.project_id_edit)
        
        self.seed_spin = QSpinBox()
        self.seed_spin.setRange(0, 65535)
        self.seed_spin.setValue(0)
        self.seed_spin.setSpecialValueText("Random")
        config_layout.addRow("Seed:", self.seed_spin)
        
        self.max_workers_spin = QSpinBox()
        self.max_workers_spin.setRange(1, 5)
        self.max_workers_spin.setValue(3)
        self.max_workers_spin.setToolTip("S·ªë lu·ªìng x·ª≠ l√Ω song song (1-5)")
        config_layout.addRow("Threads:", self.max_workers_spin)
        
        # Aspect Ratio selection
        self.aspect_ratio_combo = QComboBox()
        self.aspect_ratio_combo.addItems([
            "16:9",
            "9:16"
        ])
        self.aspect_ratio_combo.setCurrentIndex(0)  # Default to landscape
        config_layout.addRow("Aspect Ratio:", self.aspect_ratio_combo)
        
        config_group.setLayout(config_layout)
        left_layout.addWidget(config_group)
        
        # Group: File Excel
        file_group = QGroupBox("File Excel")
        file_layout = QVBoxLayout()
        
        file_layout_h = QHBoxLayout()
        self.excel_path_edit = QLineEdit()
        self.excel_path_edit.setPlaceholderText("Ch·ªçn file Excel...")
        browse_btn = QPushButton("üìÅ Duy·ªát")
        browse_btn.clicked.connect(self.browse_excel)
        
        file_layout_h.addWidget(self.excel_path_edit)
        file_layout_h.addWidget(browse_btn)
        file_layout.addLayout(file_layout_h)
        
        self.require_image_check = QCheckBox("Y√™u c·∫ßu c√≥ Image (c·ªôt C)")
        file_layout.addWidget(self.require_image_check)
        
        # Load Excel button
        load_excel_btn = QPushButton("üìä Load Excel")
        load_excel_btn.clicked.connect(self.load_excel_data)
        file_layout.addWidget(load_excel_btn)
        
        file_group.setLayout(file_layout)
        left_layout.addWidget(file_group)
        
        # Group: Excel Data Preview
        preview_group = QGroupBox("Excel Data Preview")
        preview_layout = QVBoxLayout()
        
        # Excel data table
        self.excel_table = QTableWidget()
        self.excel_table.setColumnCount(3)
        self.excel_table.setHorizontalHeaderLabels(["STT", "PROMPT", "IMAGE"])
        self.excel_table.horizontalHeader().setStretchLastSection(True)
        self.excel_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border-radius: 3px;
                gridline-color: #e0e0e0;
                selection-background-color: #e3f2fd;
                alternate-background-color: #f8f9fa;
            }
            QTableWidget::item {
                padding: 6px;
                border-bottom: 1px solid #f0f0f0;
                font-size: 9px;
            }
            QTableWidget::item:selected {
                background-color: transparent;
                color: inherit;
            }
            QTableWidget::item:hover {
                background-color: transparent;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                color: #333;
                padding: 6px;
                border: none;
                border-right: 1px solid #e0e0e0;
                border-bottom: 1px solid #e0e0e0;
                font-weight: bold;
                font-size: 9px;
                text-align: center;
            }
        """)
        
        # Excel table properties
        self.excel_table.setAlternatingRowColors(True)
        self.excel_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.excel_table.setSelectionMode(QTableWidget.NoSelection)
        self.excel_table.verticalHeader().setVisible(False)
        self.excel_table.setShowGrid(True)
        self.excel_table.setEditTriggers(QTableWidget.NoEditTriggers)
        self.excel_table.setMaximumHeight(200)
        
        preview_layout.addWidget(self.excel_table)
        preview_group.setLayout(preview_layout)
        left_layout.addWidget(preview_group)
        
        # Group: Output
        output_group = QGroupBox("Output")
        output_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        output_layout = QHBoxLayout()
        
        self.output_dir_edit = QLineEdit("output")
        self.output_dir_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                background-color: white;
                font-size: 12px;
                color: #333;
            }
        """)
        
        self.browse_output_btn = QPushButton("üìÅ Ch·ªçn Folder")
        self.browse_output_btn.clicked.connect(self.browse_output_dir)
        self.browse_output_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        output_layout.addWidget(self.output_dir_edit)
        output_layout.addWidget(self.browse_output_btn)
        output_group.setLayout(output_layout)
        left_layout.addWidget(output_group)
        
        left_layout.addStretch()
        left_panel.setLayout(left_layout)
        
        # Right panel - Progress v√† Log (60%)
        right_panel = QWidget()
        right_layout = QVBoxLayout()
        
        # Progress section
        progress_group = QGroupBox("Ti·∫øn ƒë·ªô X·ª≠ l√Ω")
        progress_layout = QVBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                text-align: center;
                font-weight: bold;
                background-color: #f5f5f5;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                border-radius: 3px;
            }
        """)
        
        self.progress_label = QLabel("S·∫µn s√†ng")
        self.progress_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                color: #666;
                padding: 5px;
                background-color: #f8f9fa;
                border-radius: 3px;
                border-left: 3px solid #2196F3;
            }
        """)
        
        progress_layout.addWidget(self.progress_bar)
        progress_layout.addWidget(self.progress_label)
        progress_group.setLayout(progress_layout)
        right_layout.addWidget(progress_group)
        
        # Log section
        log_group = QGroupBox("Log X·ª≠ l√Ω")
        log_layout = QVBoxLayout()
        
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setStyleSheet("""
            QTextEdit {
                background-color: #1e1e1e;
                color: #ffffff;
                border: 1px solid #333;
                border-radius: 5px;
                font-family: "Consolas", "Monaco", monospace;
                font-size: 11px;
                padding: 10px;
            }
        """)
        
        log_layout.addWidget(self.log_text)
        log_group.setLayout(log_layout)
        right_layout.addWidget(log_group)
        
        # Control buttons
        control_group = QGroupBox("ƒêi·ªÅu khi·ªÉn")
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("üöÄ B·∫Øt ƒë·∫ßu X·ª≠ l√Ω")
        self.start_btn.clicked.connect(self.start_processing)
        self.start_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                min-width: 150px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:disabled {
                background-color: #ccc;
            }
        """)
        
        stop_btn = QPushButton("‚èπÔ∏è D·ª´ng")
        stop_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #d32f2f;
            }
        """)
        
        control_layout.addWidget(self.start_btn)
        control_layout.addWidget(stop_btn)
        control_layout.addStretch()
        control_group.setLayout(control_layout)
        right_layout.addWidget(control_group)
        
        right_panel.setLayout(right_layout)
        
        # Add panels to main layout
        main_layout.addWidget(left_panel, 2)  # 40%
        main_layout.addWidget(right_panel, 3)  # 60%
        
        layout.addLayout(main_layout)
        tab.setLayout(layout)
        self.tab_widget.addTab(tab, "X·ª≠ l√Ω Video")
        
    def create_merge_tab(self):
        """Tab 3: Gh√©p video"""
        tab = QWidget()
        layout = QVBoxLayout()
        
        # Main layout v·ªõi t·ª∑ l·ªá c√¢n ƒë·ªëi
        main_layout = QHBoxLayout()
        
        # Left panel - Video list v√† controls (60%)
        left_panel = QWidget()
        left_layout = QVBoxLayout()
        
        # Group: Video List
        video_group = QGroupBox("Danh s√°ch Video")
        video_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        video_layout = QVBoxLayout()
        
        # Header buttons
        header_layout = QHBoxLayout()
        add_video_btn = QPushButton("üìÅ Th√™m Video")
        add_video_btn.clicked.connect(self.add_video_to_merge)
        add_video_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        
        clear_btn = QPushButton("üóëÔ∏è X√≥a t·∫•t c·∫£")
        clear_btn.clicked.connect(self.clear_merge_list)
        clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
        """)
        
        header_layout.addWidget(add_video_btn)
        header_layout.addWidget(clear_btn)
        header_layout.addStretch()
        
        video_layout.addLayout(header_layout)
        
        # Video table v·ªõi styling gi·ªëng tab 1
        self.video_table = QTableWidget()
        self.video_table.setColumnCount(3)
        self.video_table.setHorizontalHeaderLabels(["STT", "FILE VIDEO", "ƒê∆Ø·ªúNG D·∫™N"])
        
        # Styling video table gi·ªëng tab 1
        self.video_table.setStyleSheet("""
            QTableWidget {
                background-color: white;
                border-radius: 3px;
                gridline-color: #e0e0e0;
                selection-background-color: #e3f2fd;
                alternate-background-color: #f8f9fa;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f0f0f0;
                font-size: 7px;
            }
            QTableWidget::item:selected {
                background-color: transparent;
                color: inherit;
            }
            QTableWidget::item:hover {
                background-color: transparent;
            }
            QHeaderView::section {
                background-color: #f8f9fa;
                color: #333;
                padding: 8px;
                border: none;
                border-right: 1px solid #e0e0e0;
                border-bottom: 1px solid #e0e0e0;
                font-weight: bold;
                font-size: 10px;
                text-align: center;
            }
            QHeaderView::section:first {
                border-top-left-radius: 8px;
            }
            QHeaderView::section:last {
                border-top-right-radius: 8px;
                border-right: none;
            }
        """)
        
        # Video table properties
        self.video_table.horizontalHeader().setStretchLastSection(True)
        self.video_table.setAlternatingRowColors(True)
        self.video_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.video_table.setSelectionMode(QTableWidget.NoSelection)
        self.video_table.verticalHeader().setVisible(False)
        self.video_table.setShowGrid(True)
        self.video_table.setSortingEnabled(False)  # Kh√¥ng sort ƒë·ªÉ gi·ªØ th·ª© t·ª±
        self.video_table.setEditTriggers(QTableWidget.NoEditTriggers)
        
        # Set column widths
        self.video_table.verticalHeader().setDefaultSectionSize(40)
        video_layout.addWidget(self.video_table, 1)  # Stretch factor = 1 ƒë·ªÉ table m·ªü r·ªông
        video_group.setLayout(video_layout)
        left_layout.addWidget(video_group, 1)  # Stretch factor = 1 ƒë·ªÉ group m·ªü r·ªông
        
        # Group: T√πy ch·ªçn Gh√©p
        options_group = QGroupBox("T√πy ch·ªçn Gh√©p")
        options_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        options_layout = QFormLayout()
        
        self.output_name_edit = QLineEdit("merged_video.mp4")
        self.output_name_edit.setStyleSheet("""
            QLineEdit {
                padding: 8px;
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                background-color: white;
                font-size: 12px;
                color: #333;
            }
        """)
        options_layout.addRow("T√™n file output:", self.output_name_edit)
        
        self.transition_combo = QComboBox()
        self.transition_combo.addItems([
            "Kh√¥ng c√≥ transition",
            "Fade in/out",
            "Crossfade"
        ])
        self.transition_combo.setStyleSheet("""
            QComboBox {
                padding: 8px;
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                background-color: white;
                font-size: 12px;
                color: #333;
            }
        """)
        options_layout.addRow("Transition:", self.transition_combo)
        
        # Audio toggle
        self.mute_audio_check = QCheckBox("T·∫Øt √¢m thanh")
        self.mute_audio_check.setStyleSheet("""
            QCheckBox {
                font-size: 12px;
                color: #333;
            }
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
            }
        """)
        options_layout.addRow("Audio:", self.mute_audio_check)
        
        options_group.setLayout(options_layout)
        left_layout.addWidget(options_group)
        
        # Merge button
        self.merge_btn = QPushButton("üîó Gh√©p Video")
        self.merge_btn.clicked.connect(self.merge_videos)
        self.merge_btn.setStyleSheet("""
            QPushButton {
                background-color: #FF9800;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #F57C00;
            }
            QPushButton:disabled {
                background-color: #ccc;
                color: #666;
            }
        """)
        
        left_layout.addWidget(self.merge_btn)
        left_layout.addStretch()
        
        left_panel.setLayout(left_layout)
        main_layout.addWidget(left_panel)
        
        # Right panel - Progress v√† Log (40%)
        right_panel = QWidget()
        right_layout = QVBoxLayout()
        
        # Group: Ti·∫øn ƒë·ªô Gh√©p
        progress_group = QGroupBox("Ti·∫øn ƒë·ªô Gh√©p")
        progress_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        progress_layout = QVBoxLayout()
        
        self.merge_progress_bar = QProgressBar()
        self.merge_progress_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #e0e0e0;
                border-radius: 5px;
                text-align: center;
                background-color: white;
                height: 25px;
            }
            QProgressBar::chunk {
                background-color: #FF9800;
                border-radius: 3px;
            }
        """)
        progress_layout.addWidget(self.merge_progress_bar)
        
        self.merge_progress_label = QLabel("S·∫µn s√†ng gh√©p video")
        self.merge_progress_label.setStyleSheet("""
            QLabel {
                color: #666;
                font-size: 12px;
            }
        """)
        progress_layout.addWidget(self.merge_progress_label)
        
        progress_group.setLayout(progress_layout)
        right_layout.addWidget(progress_group)
        
        # Group: Log Gh√©p
        log_group = QGroupBox("Log Gh√©p Video")
        log_group.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        log_layout = QVBoxLayout()
        
        self.merge_log_text = QTextEdit()
        self.merge_log_text.setReadOnly(True)
        self.merge_log_text.setStyleSheet("""
            QTextEdit {
                background-color: #2b2b2b;
                color: #ffffff;
                border: 1px solid #555;
                border-radius: 5px;
                font-family: "Consolas", "Monaco", monospace;
                font-size: 11px;
                padding: 8px;
            }
        """)
        log_layout.addWidget(self.merge_log_text)
        
        log_group.setLayout(log_layout)
        right_layout.addWidget(log_group)
        
        right_panel.setLayout(right_layout)
        main_layout.addWidget(right_panel)
        
        tab.setLayout(main_layout)
        self.tab_widget.addTab(tab, "Gh√©p Video")
        
    def add_cookie(self):
        """Th√™m cookie m·ªõi"""
        dialog = AddCookieDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            data = dialog.get_data()
            if data["name"] and data["cookie"]:
                self.accounts.append(data)
                self.save_accounts()
                self.load_accounts_to_table()
                self.update_account_info()
                
                msg = create_styled_messagebox(self, "Th√†nh c√¥ng", "‚úÖ ƒê√£ th√™m cookie th√†nh c√¥ng!")
                msg.exec_()
            else:
                create_styled_messagebox(self, "L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", QMessageBox.Warning).exec_()
                
    def load_accounts(self):
        """Load accounts t·ª´ file"""
        try:
            if os.path.exists("accounts.json"):
                with open("accounts.json", "r", encoding="utf-8") as f:
                    self.accounts = json.load(f)
            else:
                self.accounts = []
        except Exception as e:
            print(f"L·ªói load accounts: {e}")
            self.accounts = []
        
        # C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
        self.update_account_info()
            
    def save_accounts(self):
        """Save accounts ra file"""
        try:
            with open("accounts.json", "w", encoding="utf-8") as f:
                json.dump(self.accounts, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"L·ªói save accounts: {e}")
            
    def load_accounts_to_table(self):
        """Load accounts v√†o table"""
        self.account_table.setRowCount(len(self.accounts))
        
        for i, account in enumerate(self.accounts):
            # T√™n t√†i kho·∫£n
            name_item = QTableWidgetItem(account.get("name", ""))
            name_item.setFont(QFont("Roboto", 9, QFont.Bold))
            name_item.setTextAlignment(Qt.AlignCenter)
            self.account_table.setItem(i, 0, name_item)
            
            # Extract email from cookie if possible
            email = "Unknown"
            try:
                cookie_text = account.get("cookie", "")
                if "email" in cookie_text.lower():
                    import urllib.parse
                    
                    # Multiple patterns to catch different email formats
                    patterns = [
                        r'email["\']?\s*[:=]\s*["\']?([^"\';\s]+)',  # email: value
                        r'["\']?email["\']?\s*[:=]\s*["\']?([^"\';\s]+)',  # "email": value
                        r'%40([^%]+)%40',  # URL encoded @ symbol
                        r'@([^;\s]+)',  # Direct @ pattern
                    ]
                    
                    for pattern in patterns:
                        email_match = re.search(pattern, cookie_text, re.IGNORECASE)
                        if email_match:
                            raw_email = email_match.group(1)
                            # Decode URL-encoded email
                            email = urllib.parse.unquote(raw_email)
                            
                            # Validate email format
                            if '@' in email and '.' in email.split('@')[-1]:
                                break
                            else:
                                email = "Unknown"
            except:
                pass
                
            email_item = QTableWidgetItem(email)
            email_item.setFont(QFont("Roboto", 10))
            email_item.setTextAlignment(Qt.AlignCenter)
            if email != "Unknown":
                email_item.setForeground(Qt.darkBlue)
            self.account_table.setItem(i, 1, email_item)
            
            # Tr·∫°ng th√°i ƒë∆°n gi·∫£n
            status = account.get("status", "Unknown")
            if "Done" in status:
                status_display = "Done"
                status_color = Qt.darkGreen
            elif "Error" in status:
                status_display = "Error"
                status_color = Qt.darkRed
            else:
                status_display = "Unknown"
                status_color = Qt.darkGray
                
            status_item = QTableWidgetItem(status_display)
            status_item.setFont(QFont("Roboto", 10))
            status_item.setTextAlignment(Qt.AlignCenter)
            status_item.setForeground(status_color)
            self.account_table.setItem(i, 2, status_item)
            
            # Th·ªùi gian expires
            expires_item = QTableWidgetItem(account.get("expires", "Unknown"))
            expires_item.setFont(QFont("Roboto", 10))
            expires_item.setForeground(Qt.darkGray)
            expires_item.setTextAlignment(Qt.AlignCenter)
            self.account_table.setItem(i, 3, expires_item)
            
            # N√∫t x√≥a
            delete_btn = QPushButton("üóëÔ∏è X√≥a")
            delete_btn.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    padding: 6px 12px;
                    border-radius: 4px;
                    font-weight: bold;
                    font-size: 10px;
                }
                QPushButton:hover {
                    background-color: #d32f2f;
                }
                QPushButton:pressed {
                    background-color: #b71c1c;
                }
            """)
            delete_btn.clicked.connect(lambda checked, row=i: self.delete_account(row))
            self.account_table.setCellWidget(i, 4, delete_btn)
            
        # Auto resize columns v√† set column widths
        self.account_table.resizeColumnsToContents()
        
        # Set column widths properly
        header = self.account_table.horizontalHeader()
        header.setSectionResizeMode(0, header.Stretch)  # NAME
        header.setSectionResizeMode(1, header.Stretch)  # EMAIL  
        header.setSectionResizeMode(2, header.ResizeToContents)  # STATUS
        header.setSectionResizeMode(3, header.ResizeToContents)  # EXPIRES
        header.setSectionResizeMode(4, header.ResizeToContents)  # ACTION
            
    def delete_account(self, row):
        """X√≥a t√†i kho·∫£n t·∫°i row ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
        if row < 0 or row >= len(self.accounts):
            return
            
        # L·∫•y th√¥ng tin t√†i kho·∫£n ƒë·ªÉ hi·ªÉn th·ªã trong dialog
        account = self.accounts[row]
        account_name = account.get("name", "Unknown")
        account_email = "Unknown"
        
        # Extract email from cookie if possible
        try:
            cookie_text = account.get("cookie", "")
            if "email" in cookie_text.lower():
                import urllib.parse
                patterns = [
                    r'email["\']?\s*[:=]\s*["\']?([^"\';\s]+)',
                    r'["\']?email["\']?\s*[:=]\s*["\']?([^"\';\s]+)',
                    r'%40([^%]+)%40',
                    r'@([^;\s]+)',
                ]
                
                for pattern in patterns:
                    email_match = re.search(pattern, cookie_text, re.IGNORECASE)
                    if email_match:
                        raw_email = email_match.group(1)
                        email = urllib.parse.unquote(raw_email)
                        if '@' in email and '.' in email.split('@')[-1]:
                            account_email = email
                            break
        except:
            pass
        
        # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
        msg = QMessageBox()
        msg.setWindowTitle("X√°c nh·∫≠n x√≥a t√†i kho·∫£n")
        msg.setText(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n n√†y?")
        msg.setInformativeText(f"T√™n: {account_name}\nEmail: {account_email}")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        
        # Styling cho message box
        msg.setStyleSheet("""
            QMessageBox {
                background-color: white;
                font-family: "Segoe UI";
                font-size: 12px;
            }
            QMessageBox QPushButton {
                background-color: #007bff;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
                min-width: 80px;
            }
            QMessageBox QPushButton:hover {
                background-color: #0056b3;
            }
        """)
        
        if msg.exec_() == QMessageBox.Yes:
            # X√≥a t√†i kho·∫£n kh·ªèi danh s√°ch
            del self.accounts[row]
            
            # L∆∞u l·∫°i file accounts.json
            self.save_accounts()
            
            # Refresh table
            self.load_accounts_to_table()
            self.update_account_info()
            
            # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
            create_styled_messagebox(self, "Th√†nh c√¥ng", f"ƒê√£ x√≥a t√†i kho·∫£n {account_name}").exec_()

    def refresh_accounts(self):
        """L√†m m·ªõi danh s√°ch accounts"""
        self.load_accounts()
        self.load_accounts_to_table()
        self.update_account_info()
        
    def update_account_info(self):
        """C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n cho auto distribution"""
        # Ki·ªÉm tra xem account_info_label ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
        if not hasattr(self, 'account_info_label'):
            return
            
        if not self.accounts:
            self.account_info_label.setText("‚ùå Kh√¥ng c√≥ t√†i kho·∫£n n√†o!")
            self.account_info_label.setStyleSheet("""
                QLabel {
                    color: #f44336;
                    font-size: 12px;
                    font-weight: bold;
                    padding: 8px;
                    background-color: #ffebee;
                    border-radius: 5px;
                    border-left: 4px solid #f44336;
                }
            """)
            return
        
        # ƒê·∫øm s·ªë t√†i kho·∫£n active
        active_accounts = [acc for acc in self.accounts if "Done" in acc.get("status", "")]
        total_accounts = len(self.accounts)
        active_count = len(active_accounts)
        
        if active_count == 0:
            self.account_info_label.setText("‚ö†Ô∏è Kh√¥ng c√≥ t√†i kho·∫£n n√†o ho·∫°t ƒë·ªông!")
            self.account_info_label.setStyleSheet("""
                QLabel {
                    color: #ff9800;
                    font-size: 12px;
                    font-weight: bold;
                    padding: 8px;
                    background-color: #fff3e0;
                    border-radius: 5px;
                    border-left: 4px solid #ff9800;
                }
            """)
        else:
            self.account_info_label.setText(f"‚úÖ {active_count}/{total_accounts} t√†i kho·∫£n ho·∫°t ƒë·ªông\nüîÑ T·ª± ƒë·ªông chia t·∫£i gi·ªØa c√°c t√†i kho·∫£n")
            self.account_info_label.setStyleSheet("""
                QLabel {
                    color: #4caf50;
                    font-size: 12px;
                    font-weight: bold;
                    padding: 8px;
                    background-color: #e8f5e8;
                    border-radius: 5px;
                    border-left: 4px solid #4caf50;
                }
            """)
                
    def browse_excel(self):
        """Ch·ªçn file Excel"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Ch·ªçn file Excel", "", "Excel files (*.xlsx *.xls)"
        )
        if file_path:
            self.excel_path_edit.setText(file_path)
            
    def browse_output_dir(self):
        """Ch·ªçn th∆∞ m·ª•c output"""
        current_dir = self.output_dir_edit.text().strip()
        if not current_dir or not os.path.exists(current_dir):
            current_dir = os.getcwd()  # Default to current directory
            
        dir_path = QFileDialog.getExistingDirectory(
            self, 
            "Ch·ªçn th∆∞ m·ª•c l∆∞u video", 
            current_dir
        )
        if dir_path:
            self.output_dir_edit.setText(dir_path)
            self.log_text.append(f"[{datetime.now().strftime('%H:%M:%S')}] üìÅ ƒê√£ ch·ªçn folder output: {dir_path}")
            
    def load_excel_data(self):
        """Load v√† hi·ªÉn th·ªã d·ªØ li·ªáu Excel"""
        excel_path = self.excel_path_edit.text()
        if not excel_path:
            create_styled_messagebox(self, "L·ªói", "Vui l√≤ng ch·ªçn file Excel tr∆∞·ªõc!", QMessageBox.Warning).exec_()
            return
            
        if not os.path.exists(excel_path):
            create_styled_messagebox(self, "L·ªói", "File Excel kh√¥ng t·ªìn t·∫°i!", QMessageBox.Warning).exec_()
            return
            
        try:
            require_image = self.require_image_check.isChecked()
            prompts = read_excel_prompts(excel_path, require_image)
            
            if not prompts:
                create_styled_messagebox(self, "L·ªói", "Kh√¥ng c√≥ d·ªØ li·ªáu n√†o trong file Excel!", QMessageBox.Warning).exec_()
                return
                
            # Hi·ªÉn th·ªã d·ªØ li·ªáu trong table
            self.excel_table.setRowCount(len(prompts))
            
            for i, (stt, prompt, image_path) in enumerate(prompts):
                # STT
                stt_item = QTableWidgetItem(str(stt))
                stt_item.setFont(QFont("Roboto", 9))
                stt_item.setTextAlignment(Qt.AlignCenter)
                stt_item.setForeground(Qt.darkBlue)
                self.excel_table.setItem(i, 0, stt_item)
                
                # PROMPT
                prompt_item = QTableWidgetItem(prompt)
                prompt_item.setFont(QFont("Roboto", 9))
                prompt_item.setTextAlignment(Qt.AlignLeft)
                self.excel_table.setItem(i, 1, prompt_item)
                
                # IMAGE - L∆∞u ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß thay v√¨ ch·ªâ t√™n file
                image_display = "None"
                if image_path:
                    if os.path.exists(image_path):
                        image_display = image_path  # L∆∞u ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
                    else:
                        image_display = "‚ùå Not found"
                        
                image_item = QTableWidgetItem(image_display)
                image_item.setFont(QFont("Roboto", 9))
                image_item.setTextAlignment(Qt.AlignCenter)
                
                if image_display == "None":
                    image_item.setForeground(Qt.darkGray)
                elif image_display == "‚ùå Not found":
                    image_item.setForeground(Qt.darkRed)
                else:
                    image_item.setForeground(Qt.darkGreen)
                    
                self.excel_table.setItem(i, 2, image_item)
                
            # Auto resize columns
            self.excel_table.resizeColumnsToContents()
            
            # Set column widths
            header = self.excel_table.horizontalHeader()
            header.setSectionResizeMode(0, header.ResizeToContents)  # STT
            header.setSectionResizeMode(1, header.Stretch)  # PROMPT
            header.setSectionResizeMode(2, header.ResizeToContents)  # IMAGE
            
            create_styled_messagebox(self, "Th√†nh c√¥ng", f"‚úÖ ƒê√£ load {len(prompts)} d√≤ng d·ªØ li·ªáu t·ª´ Excel!").exec_()
            
        except Exception as e:
            create_styled_messagebox(self, "L·ªói", f"L·ªói ƒë·ªçc file Excel: {str(e)}", QMessageBox.Critical).exec_()
            
    def test_accounts(self):
        """Test t·∫•t c·∫£ t√†i kho·∫£n tr∆∞·ªõc khi ch·∫°y"""
        valid_accounts = []
        
        for account in self.accounts:
            cookie = account.get("cookie", "")
            name = account.get("name", "Unknown")
            
            if not cookie or cookie.startswith("YOUR_COOKIE_HERE"):
                self.log_text.append(f"‚ö†Ô∏è {name}: Cookie kh√¥ng h·ª£p l·ªá")
                continue
                
            token = fetch_access_token_from_session(cookie)
            if token:
                valid_accounts.append(account)
                self.log_text.append(f"‚úÖ {name}: Token h·ª£p l·ªá")
            else:
                self.log_text.append(f"‚ùå {name}: Kh√¥ng th·ªÉ l·∫•y token - Cookie c√≥ th·ªÉ ƒë√£ h·∫øt h·∫°n")
        
        return valid_accounts

    def test_accounts_ui(self):
        """Test t√†i kho·∫£n v·ªõi UI feedback"""
        if not self.accounts:
            create_styled_messagebox(self, "L·ªói", "Kh√¥ng c√≥ t√†i kho·∫£n n√†o ƒë·ªÉ test!", QMessageBox.Warning).exec_()
            return
        
        self.log_text.append("üîç ƒêang ki·ªÉm tra t√†i kho·∫£n...")
        valid_accounts = self.test_accounts()
        
        if valid_accounts:
            create_styled_messagebox(self, "K·∫øt qu·∫£ Test", f"‚úÖ {len(valid_accounts)}/{len(self.accounts)} t√†i kho·∫£n h·ª£p l·ªá!\n\nC√≥ th·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω video.", QMessageBox.Information).exec_()
        else:
            create_styled_messagebox(self, "K·∫øt qu·∫£ Test", "‚ùå Kh√¥ng c√≥ t√†i kho·∫£n n√†o h·ª£p l·ªá!\n\nVui l√≤ng:\n1. Ki·ªÉm tra l·∫°i cookie\n2. Th√™m t√†i kho·∫£n m·ªõi\n3. ƒê·∫£m b·∫£o cookie ch∆∞a h·∫øt h·∫°n", QMessageBox.Warning).exec_()

    def start_processing(self):
        """B·∫Øt ƒë·∫ßu x·ª≠ l√Ω video v·ªõi auto account distribution"""
        # Validate inputs
        if not self.accounts:
            create_styled_messagebox(self, "L·ªói", "Kh√¥ng c√≥ t√†i kho·∫£n n√†o! Vui l√≤ng th√™m t√†i kho·∫£n tr∆∞·ªõc.", QMessageBox.Warning).exec_()
            return
        
        # Test t√†i kho·∫£n tr∆∞·ªõc khi ch·∫°y
        self.log_text.append("üîç ƒêang ki·ªÉm tra t√†i kho·∫£n...")
        valid_accounts = self.test_accounts()
        
        if not valid_accounts:
            create_styled_messagebox(self, "L·ªói", "Kh√¥ng c√≥ t√†i kho·∫£n n√†o h·ª£p l·ªá! Vui l√≤ng ki·ªÉm tra l·∫°i cookie.", QMessageBox.Warning).exec_()
            return
        
        self.log_text.append(f"‚úÖ T√¨m th·∫•y {len(valid_accounts)} t√†i kho·∫£n h·ª£p l·ªá")
            
        if not self.excel_path_edit.text():
            create_styled_messagebox(self, "L·ªói", "Vui l√≤ng ch·ªçn file Excel!", QMessageBox.Warning).exec_()
            return
            
        if not os.path.exists(self.excel_path_edit.text()):
            create_styled_messagebox(self, "L·ªói", "File Excel kh√¥ng t·ªìn t·∫°i!", QMessageBox.Warning).exec_()
            return
            
        # Check if Excel data is loaded
        if self.excel_table.rowCount() == 0:
            create_styled_messagebox(self, "L·ªói", "Vui l√≤ng load d·ªØ li·ªáu Excel tr∆∞·ªõc!", QMessageBox.Warning).exec_()
            return
            
        # Get prompts from loaded Excel data
        prompts = []
        for row in range(self.excel_table.rowCount()):
            stt_item = self.excel_table.item(row, 0)
            prompt_item = self.excel_table.item(row, 1)
            image_item = self.excel_table.item(row, 2)
            
            if stt_item and prompt_item:
                stt = int(stt_item.text())
                prompt = prompt_item.text()
                image_path = None
                
                # Get image path if exists
                if image_item and image_item.text() not in ["None", "‚ùå Not found"]:
                    # Use full path directly from table (already stored as full path)
                    image_path = image_item.text()
                    print(f"DEBUG: STT {stt} - Image path: {image_path}")
                    print(f"DEBUG: STT {stt} - Image exists: {os.path.exists(image_path)}")
                else:
                    print(f"DEBUG: STT {stt} - No image or image not found")
                    
                prompts.append((stt, prompt, image_path))
                
        if not prompts:
            create_styled_messagebox(self, "L·ªói", "Kh√¥ng c√≥ prompt n√†o ƒë·ªÉ x·ª≠ l√Ω!", QMessageBox.Warning).exec_()
            return
            
        # Prepare config
        output_dir = self.output_dir_edit.text().strip()
        if not output_dir:
            output_dir = "output"  # Default folder
            
        # Get aspect ratio from combo box
        aspect_ratio_text = self.aspect_ratio_combo.currentText()
        if aspect_ratio_text == "9:16":
            aspect_ratio = "VIDEO_ASPECT_RATIO_PORTRAIT"
        else:  # "16:9" or default
            aspect_ratio = "VIDEO_ASPECT_RATIO_LANDSCAPE"
            
        config = {
            "project_id": self.project_id_edit.text(),
            "seed": self.seed_spin.value(),
            "max_workers": self.max_workers_spin.value(),
            "output_dir": output_dir,
            "aspect_ratio": aspect_ratio
        }
        
        # Create output directory
        os.makedirs(config["output_dir"], exist_ok=True)
        
        # Disable start button
        self.start_btn.setEnabled(False)
        self.progress_bar.setValue(0)
        self.log_text.clear()
        
        # Start processing thread v·ªõi auto account distribution (ch·ªâ s·ª≠ d·ª•ng t√†i kho·∫£n h·ª£p l·ªá)
        max_workers = self.max_workers_spin.value()
        self.processing_thread = VideoProcessingThread(prompts, valid_accounts, config, max_workers)
        self.processing_thread.progress_updated.connect(self.on_progress_updated)
        self.processing_thread.status_updated.connect(self.on_status_updated)
        self.processing_thread.finished.connect(self.on_processing_finished)
        self.processing_thread.start()
        
    def on_progress_updated(self, progress, message):
        """Update progress"""
        self.progress_bar.setValue(progress)
        self.progress_label.setText(message)
        self.log_text.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
        self.log_text.ensureCursorVisible()  # Auto scroll to bottom
        
    def on_status_updated(self, status_message):
        """Update status log"""
        self.log_text.append(f"[{datetime.now().strftime('%H:%M:%S')}] {status_message}")
        self.log_text.ensureCursorVisible()  # Auto scroll to bottom
        
    def on_processing_finished(self, results):
        """Khi x·ª≠ l√Ω ho√†n th√†nh"""
        self.start_btn.setEnabled(True)
        
        # Hi·ªÉn th·ªã dialog k·∫øt qu·∫£ chuy√™n nghi·ªáp
        dialog = ProcessingResultDialog(results, self)
        dialog.exec_()
        
        # Show detailed results in log
        self.log_text.append(f"\n=== K·∫æT QU·∫¢ CHI TI·∫æT ===")
        for stt, prompt, success, result in results:
            if success:
                self.log_text.append(f"‚úì STT {stt}: {result}")
            else:
                self.log_text.append(f"‚ùå STT {stt}: {result}")
                
    def add_video_to_merge(self):
        """Th√™m video v√†o danh s√°ch gh√©p"""
        file_paths, _ = QFileDialog.getOpenFileNames(
            self, "Ch·ªçn video ƒë·ªÉ gh√©p", "", "Video files (*.mp4 *.avi *.mov *.mkv)"
        )
        
        for file_path in file_paths:
            row = self.video_table.rowCount()
            self.video_table.insertRow(row)
            
            # Th·ª© t·ª±
            order_item = QTableWidgetItem(str(row + 1))
            order_item.setFont(QFont("Roboto", 8, QFont.Bold))
            order_item.setForeground(Qt.darkBlue)
            order_item.setTextAlignment(Qt.AlignCenter)
            self.video_table.setItem(row, 0, order_item)
            
            # T√™n file
            filename_item = QTableWidgetItem(os.path.basename(file_path))
            filename_item.setFont(QFont("Roboto", 8))
            filename_item.setForeground(Qt.darkGreen)
            filename_item.setTextAlignment(Qt.AlignCenter)
            self.video_table.setItem(row, 1, filename_item)
            
            # ƒê∆∞·ªùng d·∫´n
            path_item = QTableWidgetItem(file_path)
            path_item.setFont(QFont("Roboto", 8))
            path_item.setForeground(Qt.darkGray)
            path_item.setTextAlignment(Qt.AlignCenter)
            self.video_table.setItem(row, 2, path_item)
            
        # Auto resize columns
        self.video_table.resizeColumnsToContents()
            
    def clear_merge_list(self):
        """X√≥a t·∫•t c·∫£ video trong danh s√°ch"""
        self.video_table.setRowCount(0)
        
    def merge_videos(self):
        """Gh√©p c√°c video l·∫°i v·ªõi nhau"""
        if self.video_table.rowCount() < 2:
            create_styled_messagebox(self, "L·ªói", "C·∫ßn √≠t nh·∫•t 2 video ƒë·ªÉ gh√©p!", QMessageBox.Warning).exec_()
            return
            
        # Collect video paths
        video_paths = []
        for row in range(self.video_table.rowCount()):
            path_item = self.video_table.item(row, 2)
            if path_item:
                video_paths.append(path_item.text())
                
        if len(video_paths) < 2:
            create_styled_messagebox(self, "L·ªói", "Kh√¥ng ƒë·ªß video h·ª£p l·ªá!", QMessageBox.Warning).exec_()
            return
            
        # Output path
        output_name = self.output_name_edit.text()
        if not output_name.endswith('.mp4'):
            output_name += '.mp4'
            
        output_path = os.path.join(os.path.dirname(video_paths[0]), output_name)
        
        # Get audio setting
        mute_audio = self.mute_audio_check.isChecked()
        
        # Disable merge button v√† clear log
        self.merge_btn.setEnabled(False)
        self.merge_progress_bar.setValue(0)
        self.merge_log_text.clear()
        
        # Start merge thread
        self.merge_thread = VideoMergeThread(video_paths, output_path, mute_audio)
        self.merge_thread.progress_updated.connect(self.on_merge_progress_updated)
        self.merge_thread.log_updated.connect(self.on_merge_log_updated)
        self.merge_thread.finished.connect(self.on_merge_finished)
        self.merge_thread.start()
        
    def on_merge_progress_updated(self, progress, message):
        """Update merge progress"""
        self.merge_progress_bar.setValue(progress)
        self.merge_progress_label.setText(message)
        
    def on_merge_log_updated(self, message):
        """Update merge log"""
        self.merge_log_text.append(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
        self.merge_log_text.ensureCursorVisible()
        
    def on_merge_finished(self, success, message):
        """Khi gh√©p video ho√†n th√†nh"""
        # Re-enable merge button
        self.merge_btn.setEnabled(True)
        
        if success:
            create_styled_messagebox(self, "Th√†nh c√¥ng", message).exec_()
        else:
            create_styled_messagebox(self, "L·ªói", message, QMessageBox.Critical).exec_()



    
from auth.auth_guard import KeyLoginDialog, get_device_id
from version_checker import check_for_update, CURRENT_VERSION
import sys
import logging

# Constants
API_URL = "http://62.171.131.164:5000"
API_AUTH_ENDPOINT = f"{API_URL}/api/make_video_ai/auth"
VERSION_CHECK_ENDPOINT = f"{API_URL}/api/version.json"
# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """Main application entry point"""
    try:
        app = QApplication(sys.argv)
        app.setStyleSheet("""
        QMainWindow {
            background-color: #f0f0f0;
        }
        QTabWidget::pane {
            border: 1px solid #c0c0c0;
            background-color: white;
        }
        QTabBar::tab {
            background-color: #e0e0e0;
            padding: 8px 16px;
            margin-right: 2px;
        }
        QTabBar::tab:selected {
            background-color: white;
            border-bottom: 2px solid #2196F3;
        }
        QTableWidget {
            gridline-color: #e0e0e0;
            background-color: white;
            alternate-background-color: #f8f9fa;
            border: 1px solid #d0d0d0;
            border-radius: 8px;
            font-family: "Roboto", "Open Sans", "Segoe UI";
        }
        QTableWidget::item {
            padding: 12px 8px;
            border-bottom: 1px solid #f0f0f0;
            font-size: 8px;
            font-family: "Roboto", "Open Sans", "Segoe UI";
        }
        QTableWidget::item:selected {
            background-color: #e3f2fd;
            color: #1976d2;
        }
        QTableWidget::item:hover {
            background-color: #f5f5f5;
        }
        QHeaderView::section {
            background-color: #f8f9fa;
            color: #333;
            padding: 12px 8px;
            border: none;
            border-right: 1px solid #e0e0e0;
            border-bottom: 2px solid #2196F3;
            font-weight: bold;
            font-size: 14px;
            font-family: "Roboto", "Open Sans", "Segoe UI";
        }
        QGroupBox {
            font-weight: bold;
            font-size: 12px;
            border: 1px solid #d0d0d0;
            border-radius: 8px;
            margin-top: 10px;
            padding-top: 15px;
            background-color: #fafafa;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            left: 15px;
            padding: 0 8px 0 8px;
            color: #333;
            background-color: #fafafa;
        }
    """)
        # Check for updates
        if check_for_update(VERSION_CHECK_ENDPOINT):
            logger.info("Update check completed, exiting")
            return 0
            
        # Authenticate user
        login_dialog = KeyLoginDialog(API_AUTH_ENDPOINT)
        if login_dialog.exec_() != QDialog.Accepted or not login_dialog.validated:
            logger.warning("Authentication failed or cancelled")
            return 0
            
        # Get authentication info
        key_info = login_dialog.key_info
        key = key_info.get("key")
        expires_raw = key_info.get("expires", "")
        remaining = key_info.get("remaining", 0)
        device_id = get_device_id()[0]
        
        logger.info(f"Authentication successful - Key: {key}, Device: {device_id}, Remaining: {remaining}")
        
        # Create and show main UI
        ui = MainWindow()
        expires = expires_raw if expires_raw else "Unknown"
        window_title = f"Veo3 AI Generator v{CURRENT_VERSION} - @huyit32 - KEY: {key} | Expires: {expires} | Remaining: {remaining}"
        ui.setWindowTitle(window_title)
        ui.show()
        
        return app.exec_()
        
    except Exception as e:
        logger.error(f"Application startup failed: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())