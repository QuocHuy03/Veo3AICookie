import os
import json
import time
import threading
import re
import uuid
import random
from datetime import datetime, timezone, timedelta
from typing import Optional, Dict, Any, List, Tuple
from concurrent.futures import ThreadPoolExecutor, as_completed
import sys
import requests
import pandas as pd

from auth.auth_guard import check_key_online
API_URL = "http://62.171.131.164:5000"
GENERATE_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchAsyncGenerateVideoText"
GENERATE_IMAGE_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchAsyncGenerateVideoStartImage"
CHECK_URL = "https://aisandbox-pa.googleapis.com/v1/video:batchCheckAsyncVideoGenerationStatus"
SESSION_URL = "https://labs.google/fx/api/auth/session"
UPLOAD_IMAGE_URL = "https://aisandbox-pa.googleapis.com/v1:uploadUserImage"

# User-Agent gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Edge/120.0.0.0 Safari/537.36"
]

# Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t
BROWSER_HEADERS = {
	"Accept": "application/json, text/plain, */*",
	"Accept-Language": "en-US,en;q=0.9,vi;q=0.8",
	"Accept-Encoding": "gzip, deflate, br",
	"Cache-Control": "no-cache",
	"Pragma": "no-cache",
	"Connection": "keep-alive"
}


# C√°c h√†m FFmpeg ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè v√¨ kh√¥ng c√≤n c·∫ßn thi·∫øt
# Gi·ªù ƒë√¢y t·∫£i tr·ª±c ti·∫øp file MP4 t·ª´ URL


def get_random_user_agent() -> str:
	"""L·∫•y User-Agent ng·∫´u nhi√™n"""
	return random.choice(USER_AGENTS)


def get_browser_headers() -> Dict[str, str]:
	"""T·∫°o headers gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t"""
	headers = BROWSER_HEADERS.copy()
	headers["User-Agent"] = get_random_user_agent()
	return headers


def get_api_headers(token: str) -> Dict[str, str]:
	"""T·∫°o headers cho API requests v·ªõi token"""
	header_token = token.strip()
	if header_token.lower().startswith("bearer "):
		header_token = header_token.split(" ", 1)[1]
	
	# Headers c∆° b·∫£n cho API - lo·∫°i b·ªè Origin ƒë·ªÉ tr√°nh xung ƒë·ªôt
	headers = {
		"Content-Type": "application/json",
		"Authorization": f"Bearer {header_token}",
		"User-Agent": get_random_user_agent(),
		"Accept": "application/json",
		"Accept-Language": "en-US,en;q=0.9",
		"Accept-Encoding": "gzip, deflate, br"
	}
	
	return headers


def get_session_config() -> Dict[str, Any]:
	"""T·∫°o c·∫•u h√¨nh session gi·∫£ l·∫≠p"""
	return {
		"verify": True,
		"allow_redirects": True,
		"timeout": (60, 300)  # (connect timeout, read timeout) - tƒÉng timeout l√™n 5 ph√∫t cho video generation
	}


def get_fake_fingerprint() -> Dict[str, str]:
	"""T·∫°o fingerprint gi·∫£ l·∫≠p"""
	return {
		"X-Client-Data": "CJW2yQEIpLbJAQjBtskBCKmdygE=",
		"X-Goog-Api-Key": "AIzaSyBvQZgjXvJ8QJ8QJ8QJ8QJ8QJ8QJ8QJ8QJ8",
		"X-Goog-AuthUser": "0",
		"X-Goog-PageId": str(random.randint(1000000, 9999999)),
		"X-Goog-Request-Id": str(uuid.uuid4()),
		"X-Goog-User-Project": "labs-ai-sandbox",
		"X-Origin": "https://labs.google",
		"X-Referer": "https://labs.google/",
		"X-Requested-With": "XMLHttpRequest"
	}


def add_random_delay(min_delay: float = 0.1, max_delay: float = 0.5) -> None:
	"""Th√™m delay ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p h√†nh vi ng∆∞·ªùi d√πng th·∫≠t"""
	time.sleep(random.uniform(min_delay, max_delay))


def auto_retry_with_backoff(func, *args, max_retries: int = 3, base_delay: float = 1.0, 
                           max_delay: float = 60.0, backoff_factor: float = 2.0, 
                           retry_on_exceptions: tuple = (Exception,), **kwargs):
	"""
	T·ª± ƒë·ªông retry m·ªôt h√†m v·ªõi exponential backoff
	
	Args:
		func: H√†m c·∫ßn retry
		*args: Arguments cho h√†m
		max_retries: S·ªë l·∫ßn retry t·ªëi ƒëa
		base_delay: Delay c∆° b·∫£n (gi√¢y)
		max_delay: Delay t·ªëi ƒëa (gi√¢y)
		backoff_factor: H·ªá s·ªë tƒÉng delay
		retry_on_exceptions: Tuple c√°c exception c·∫ßn retry
		**kwargs: Keyword arguments cho h√†m
	
	Returns:
		K·∫øt qu·∫£ c·ªßa h√†m n·∫øu th√†nh c√¥ng
		
	Raises:
		Exception cu·ªëi c√πng n·∫øu h·∫øt s·ªë l·∫ßn retry
	"""
	last_exception = None
	
	for attempt in range(max_retries + 1):  # +1 v√¨ attempt ƒë·∫ßu ti√™n kh√¥ng ph·∫£i retry
		try:
			return func(*args, **kwargs)
		except retry_on_exceptions as e:
			last_exception = e
			
			if attempt < max_retries:
				# T√≠nh delay v·ªõi exponential backoff
				delay = min(base_delay * (backoff_factor ** attempt), max_delay)
				# Th√™m jitter ƒë·ªÉ tr√°nh thundering herd
				jitter = random.uniform(0.1, 0.3) * delay
				final_delay = delay + jitter
				
				print(f"üîÑ L·ªói l·∫ßn {attempt + 1}/{max_retries + 1}: {str(e)[:100]}...")
				print(f"‚è≥ Th·ª≠ l·∫°i sau {final_delay:.1f} gi√¢y...")
				time.sleep(final_delay)
			else:
				print(f"‚ùå ƒê√£ th·ª≠ {max_retries + 1} l·∫ßn nh∆∞ng v·∫´n l·ªói: {str(e)}")
				break
	
	# N·∫øu ƒë·∫øn ƒë√¢y th√¨ ƒë√£ h·∫øt s·ªë l·∫ßn retry
	raise last_exception



def http_post_json(url: str, payload: Dict[str, Any], token: str, proxy: Optional[Dict[str, str]] = None, max_retries: int = 5) -> Dict[str, Any]:
	headers = get_api_headers(token)
	session_config = get_session_config()
	
	# T·∫°o session v·ªõi c·∫•u h√¨nh gi·∫£ l·∫≠p
	session = requests.Session()
	session.headers.update(headers)
	
	for attempt in range(max_retries):
		try:
			# Th√™m delay ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p h√†nh vi ng∆∞·ªùi d√πng th·∫≠t
			if attempt > 0:
				# Delay l√¢u h∆°n khi retry
				add_random_delay(1.0, 3.0)
			else:
				add_random_delay(0.1, 0.5)
			
			# Th·ª≠ v·ªõi proxy tr∆∞·ªõc, n·∫øu l·ªói th√¨ th·ª≠ kh√¥ng proxy
			current_proxy = proxy
			if attempt > 0 and proxy:
				print(f"üîÑ L·∫ßn th·ª≠ {attempt + 1}: Th·ª≠ kh√¥ng proxy...")
				current_proxy = None
			
			resp = session.post(
				url, 
				data=json.dumps(payload), 
				proxies=current_proxy,
				**session_config
			)
			resp.raise_for_status()
			return resp.json()
			
		except (requests.exceptions.ProxyError, requests.exceptions.ConnectionError) as e:
			print(f"‚ùå L·ªói proxy/connection (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}): {e}")
			if attempt < max_retries - 1:
				print(f"üîÑ Th·ª≠ l·∫°i sau {2 ** attempt} gi√¢y...")
				time.sleep(2 ** attempt)
				continue
			else:
				raise
				
		except requests.exceptions.Timeout as e:
			print(f"‚è∞ Timeout (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}): {e}")
			if attempt < max_retries - 1:
				print(f"üîÑ Th·ª≠ l·∫°i sau {3 ** attempt} gi√¢y...")
				time.sleep(3 ** attempt)  # Delay l√¢u h∆°n cho timeout
				continue
			else:
				raise
				
		except requests.HTTPError as e:
			# Debug: In ra response chi ti·∫øt khi c√≥ l·ªói
			print(f"‚ùå L·ªói HTTP {e.response.status_code} (l·∫ßn th·ª≠ {attempt + 1}/{max_retries}): {e.response.text}")
			
			# N·∫øu l√† l·ªói 500 v√† ch∆∞a h·∫øt s·ªë l·∫ßn th·ª≠, th·ª≠ l·∫°i
			if e.response.status_code == 500 and attempt < max_retries - 1:
				print(f"üîÑ Th·ª≠ l·∫°i sau {2 ** attempt} gi√¢y...")
				time.sleep(2 ** attempt)  # Exponential backoff
				continue
			
			# N·∫øu l√† l·ªói kh√°c ho·∫∑c ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠, raise exception
			if attempt == max_retries - 1:
				print(f"Request URL: {url}")
				print(f"Request Headers: {dict(session.headers)}")
			raise


def http_download(url: str, output_path: str, proxy: Optional[Dict[str, str]] = None) -> None:
	headers = get_browser_headers()
	session = requests.Session()
	session.headers.update(headers)
	
	with session.get(url, stream=True, timeout=120, proxies=proxy) as r:
		r.raise_for_status()
		with open(output_path, "wb") as f:
			for chunk in r.iter_content(chunk_size=1024 * 1024):
				if chunk:
					f.write(chunk)


def http_download_mp4(url: str, output_path: str, proxy: Optional[Dict[str, str]] = None) -> None:
	"""T·∫£i tr·ª±c ti·∫øp file mp4 t·ª´ URL"""
	headers = get_browser_headers()
	session = requests.Session()
	session.headers.update(headers)
	
	with session.get(url, stream=True, timeout=120, proxies=proxy) as r:
		r.raise_for_status()
		with open(output_path, "wb") as f:
			for chunk in r.iter_content(chunk_size=1024 * 1024):
				if chunk:
					f.write(chunk)


def delete_media(names: List[str], cookie_header_value: Optional[str], proxy: Optional[Dict[str, str]] = None, max_retries: int = 3) -> bool:
	"""G·ªçi API x√≥a media tr√™n labs.google. Tr·∫£ v·ªÅ True n·∫øu th√†nh c√¥ng.

	API: https://labs.google/fx/api/trpc/media.deleteMedia (POST)
	Body: {"json": {"names": ["<media_id>", ...]}}
	"""
	if not cookie_header_value:
		print("‚ö† B·ªè qua x√≥a media do thi·∫øu Cookie")
		return False
	
	url = "https://labs.google/fx/api/trpc/media.deleteMedia"
	headers = get_browser_headers()
	headers.update({
		"Accept": "application/json",
		"Content-Type": "application/json",
		"Cookie": cookie_header_value,
	})
	
	session = requests.Session()
	session.headers.update(headers)
	session_config = get_session_config()
	payload = {"json": {"names": names}}
	
	for attempt in range(max_retries):
		try:
			if attempt > 0:
				add_random_delay(0.5, 1.5)
			resp = session.post(url, data=json.dumps(payload), proxies=proxy, **session_config)
			resp.raise_for_status()
			print("üßπ ƒê√£ g·ª≠i y√™u c·∫ßu x√≥a media th√†nh c√¥ng")
			return True
		except requests.HTTPError as e:
			print(f"‚ùå X√≥a media l·ªói HTTP {e.response.status_code}: {e.response.text}")
			if e.response.status_code >= 500 and attempt < max_retries - 1:
				print("üîÑ Th·ª≠ x√≥a l·∫°i...")
				continue
			return False
		except Exception as e:
			print(f"‚ùå X√≥a media l·ªói: {e}")
			return False


def upload_image(token: str, image_path: str, proxy: Optional[Dict[str, str]] = None) -> str:
	"""Upload image v√† tr·∫£ v·ªÅ mediaGenerationId"""
	if not os.path.exists(image_path):
		raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file image: {image_path}")
	
	# ƒê·ªçc file image
	with open(image_path, "rb") as f:
		image_data = f.read()
	
	# Chuy·ªÉn ƒë·ªïi th√†nh base64
	import base64
	base64_data = base64.b64encode(image_data).decode('utf-8')
	
	# X√°c ƒë·ªãnh mime type
	mime_type = "image/jpeg"
	if image_path.lower().endswith('.png'):
		mime_type = "image/png"
	elif image_path.lower().endswith('.gif'):
		mime_type = "image/gif"
	elif image_path.lower().endswith('.webp'):
		mime_type = "image/webp"
	
	# T·∫°o session ID ng·∫´u nhi√™n
	session_id = f";{int(time.time() * 1000)}"
	
	payload = {
		"imageInput": {
			"aspectRatio": "IMAGE_ASPECT_RATIO_LANDSCAPE",
			"isUserUploaded": True,
			"mimeType": mime_type,
			"rawImageBytes": base64_data
		},
		"clientContext": {
			"sessionId": session_id,
			"tool": "ASSET_MANAGER"
		}
	}
	
	response = http_post_json(UPLOAD_IMAGE_URL, payload, token, proxy)
	
	# Tr√≠ch xu·∫•t mediaGenerationId
	media_gen_id = response.get("mediaGenerationId", {}).get("mediaGenerationId")
	if not media_gen_id:
		raise ValueError("Kh√¥ng t√¨m th·∫•y mediaGenerationId trong ph·∫£n h·ªìi upload")
	
	return media_gen_id


def generate_video(token: str, prompt: str, project_id: str, model_key: str = "veo_3_0_t2v_fast_ultra", aspect_ratio: str = "VIDEO_ASPECT_RATIO_LANDSCAPE", seed: Optional[int] = None, proxy: Optional[Dict[str, str]] = None) -> Tuple[Dict[str, Any], str]:
	"""Generate video v√† tr·∫£ v·ªÅ response c√πng v·ªõi scene_id ƒë∆∞·ª£c t·∫°o"""
	if seed is None:
		# ƒê·ªçc seed t·ª´ config, n·∫øu seed = 0 th√¨ random
		config = _load_config()
		config_seed = config.get("seed", 0)
		if config_seed == 0:
			seed = int(time.time()) % 65535
		else:
			seed = config_seed
	
	# T·∫°o scene_id ng·∫´u nhi√™n
	scene_id = str(uuid.uuid4())
	
	payload = {
		"clientContext": {
			"projectId": project_id,
			"tool": "PINHOLE",
			"userPaygateTier": "PAYGATE_TIER_TWO",
		},
		"requests": [
			{
				"aspectRatio": aspect_ratio,
				"seed": seed,
				"textInput": {"prompt": prompt},
				"videoModelKey": model_key,
				"metadata": {"sceneId": scene_id},
			}
		]
	}
	response = http_post_json(GENERATE_URL, payload, token, proxy)
	return response, scene_id


def generate_video_from_image(token: str, prompt: str, media_id: str, project_id: str, model_key: str = "veo_3_i2v_s_fast_ultra", aspect_ratio: str = "VIDEO_ASPECT_RATIO_LANDSCAPE", seed: Optional[int] = None, proxy: Optional[Dict[str, str]] = None) -> Tuple[Dict[str, Any], str]:
	"""Generate video t·ª´ image + prompt v√† tr·∫£ v·ªÅ response c√πng v·ªõi scene_id ƒë∆∞·ª£c t·∫°o"""
	if seed is None:
		# ƒê·ªçc seed t·ª´ config, n·∫øu seed = 0 th√¨ random
		config = _load_config()
		config_seed = config.get("seed", 0)
		if config_seed == 0:
			seed = int(time.time()) % 65535
		else:
			seed = config_seed
	
	# T·∫°o scene_id ng·∫´u nhi√™n
	scene_id = str(uuid.uuid4())
	
	payload = {
		"clientContext": {
			"projectId": project_id,
			"tool": "PINHOLE",
			"userPaygateTier": "PAYGATE_TIER_TWO"
		},
		"requests": [
			{
				"aspectRatio": aspect_ratio,
				"seed": seed,
				"textInput": {
					"prompt": prompt
				},
				"promptExpansionInput": {
					"prompt": prompt,
					"seed": seed,
					"templateId": "0TNlfC6bSF",
					"imageInputs": [
						{
							"mediaId": media_id,
							"imageUsageType": "IMAGE_USAGE_TYPE_UNSPECIFIED"
						}
					]
				},
				"videoModelKey": model_key,
				"startImage": {
					"mediaId": media_id
				},
				"metadata": {
					"sceneId": scene_id
				}
			}
		]
	}
	response = http_post_json(GENERATE_IMAGE_URL, payload, token, proxy)
	return response, scene_id


def extract_op_name(response_json: Dict[str, Any]) -> str:
	ops = response_json.get("operations", [])
	if not ops:
		raise ValueError("Kh√¥ng c√≥ operations trong ph·∫£n h·ªìi generate")
	operation = ops[0].get("operation", {})
	name = operation.get("name")
	if not name:
		raise ValueError("Kh√¥ng c√≥ operation.name trong ph·∫£n h·ªìi generate")
	return name


def poll_status(token: str, operation_name: str, scene_id: str, interval_sec: float = 3.0, timeout_sec: int = 1200, proxy: Optional[Dict[str, str]] = None) -> Dict[str, Any]:
	deadline = time.time() + timeout_sec
	last_status = None
	while time.time() < deadline:
		payload = {
			"operations": [
				{
					"operation": {"name": operation_name},
					"sceneId": scene_id,
				}
			]
		}
		resp = http_post_json(CHECK_URL, payload, token, proxy)
		ops = resp.get("operations", [])
		if not ops:
			raise ValueError("Ph·∫£n h·ªìi status kh√¥ng c√≥ operations")
		status = ops[0].get("status")
		if status != last_status:
			print(f"Status: {status}")
			last_status = status
		if status == "MEDIA_GENERATION_STATUS_SUCCESSFUL":
			return resp
		if status in {"MEDIA_GENERATION_STATUS_FAILED", "MEDIA_GENERATION_STATUS_CANCELLED"}:
			raise RuntimeError(f"Media generation th·∫•t b·∫°i: {json.dumps(resp, ensure_ascii=False)}")
		time.sleep(interval_sec)
	raise TimeoutError("H·∫øt th·ªùi gian ch·ªù media generation")


def extract_fife_url(status_json: Dict[str, Any]) -> str:
	ops = status_json.get("operations", [])
	if not ops:
		raise ValueError("Kh√¥ng c√≥ operations trong ph·∫£n h·ªìi status")
	operation = ops[0].get("operation", {})
	metadata = operation.get("metadata", {})
	video = metadata.get("video", {})
	url = video.get("fifeUrl") or video.get("fife_url")
	if not url:
		raise ValueError("Kh√¥ng t√¨m th·∫•y fifeUrl trong ph·∫£n h·ªìi status")
	return url



def _read_token_from_file(path: str) -> Optional[str]:
	try:
		with open(path, "r", encoding="utf-8") as f:
			content = f.read().strip().strip('\ufeff')
			return content or None
	except FileNotFoundError:
		return None


def _read_cookie_header_from_file(path: str) -> Optional[str]:
	try:
		with open(path, "r", encoding="utf-8") as f:
			content = f.read().strip().strip('\ufeff')
			if not content:
				return None
			if content.lower().startswith("cookie:"):
				return content.split(":", 1)[1].strip()
			return content
	except FileNotFoundError:
		return None


def _test_proxy_connection(proxy: Dict[str, str], timeout: int = 10) -> bool:
	"""Test k·∫øt n·ªëi proxy b·∫±ng c√°ch g·ªçi m·ªôt URL ƒë∆°n gi·∫£n"""
	try:
		session = requests.Session()
		session.proxies.update(proxy)
		# Test v·ªõi m·ªôt URL ƒë∆°n gi·∫£n
		response = session.get("https://httpbin.org/ip", timeout=timeout)
		if response.status_code == 200:
			print("‚úì Proxy connection test th√†nh c√¥ng")
			return True
		else:
			print(f"‚ö† Proxy test failed v·ªõi status: {response.status_code}")
			return False
	except Exception as e:
		print(f"‚ùå Proxy connection test th·∫•t b·∫°i: {e}")
		return False


def _load_config() -> Dict[str, Any]:
	"""ƒê·ªçc c·∫•u h√¨nh t·ª´ file config.json"""
	try:
		with open("config.json", "r", encoding="utf-8") as f:
			return json.load(f)
	except FileNotFoundError:
		print("‚ö† File config.json kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
		return {}
	except json.JSONDecodeError as e:
		print(f"‚ö† L·ªói ƒë·ªçc file config.json: {e}, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
		return {}
	except Exception as e:
		print(f"‚ö† L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc config.json: {e}, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
		return {}


def _read_proxy_from_file(path: str, test_connection: bool = True) -> Optional[Dict[str, str]]:
	"""ƒê·ªçc proxy t·ª´ file proxy.txt v√† tr·∫£ v·ªÅ dict proxy cho requests"""
	try:
		with open(path, "r", encoding="utf-8") as f:
			content = f.read().strip().strip('\ufeff')
			if not content:
				return None
			
			# Format: ip:port:username:password
			parts = content.split(":")
			if len(parts) != 4:
				print(f"‚ö† C·∫£nh b√°o: Format proxy kh√¥ng ƒë√∫ng trong {path}. C·∫ßn: ip:port:username:password")
				return None
			
			ip, port, username, password = parts
			
			# Validate IP v√† port
			try:
				int(port)
			except ValueError:
				print(f"‚ö† C·∫£nh b√°o: Port kh√¥ng h·ª£p l·ªá: {port}")
				return None
			
			# T·∫°o proxy dict cho requests
			proxy_url = f"http://{username}:{password}@{ip}:{port}"
			proxy_dict = {
				"http": proxy_url,
				"https": proxy_url
			}
			
			print(f"‚úì ƒê√£ t·∫£i proxy: {ip}:{port}")
			
			# Test connection n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
			if test_connection:
				if not _test_proxy_connection(proxy_dict):
					print("‚ö† Proxy kh√¥ng ho·∫°t ƒë·ªông, s·∫Ω ch·∫°y kh√¥ng proxy")
					return None
			
			return proxy_dict
	except FileNotFoundError:
		print(f"‚ö† Kh√¥ng t√¨m th·∫•y file proxy: {path}")
		return None
	except Exception as e:
		print(f"‚ùå L·ªói ƒë·ªçc file proxy: {e}")
		return None


def fetch_access_token_from_session(cookie_header_value: str, proxy: Optional[Dict[str, str]] = None) -> Optional[str]:
	# G·ªçi GET t·ªõi SESSION_URL k√®m Cookie ƒë·ªÉ l·∫•y access_token
	headers = get_browser_headers()
	headers.update({
		"Accept": "application/json",
		"Cookie": cookie_header_value,
	})
	
	# Th√™m delay ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p h√†nh vi ng∆∞·ªùi d√πng th·∫≠t
	add_random_delay(0.2, 0.8)
	
	session = requests.Session()
	session.headers.update(headers)
	session_config = get_session_config()
	
	resp = session.get(SESSION_URL, proxies=proxy, **session_config)
	resp.raise_for_status()
	try:
		data = resp.json()
	except ValueError:
		return None
	
	# Hi·ªÉn th·ªã th√¥ng tin user v√† th·ªùi gian h·∫øt h·∫°n
	user_info = data.get("user", {})
	user_name = user_info.get("name", "Unknown")
	user_email = user_info.get("email", "Unknown")
	expires = data.get("expires", "Unknown")
	
	# Chuy·ªÉn ƒë·ªïi th·ªùi gian h·∫øt h·∫°n sang gi·ªù Vi·ªát Nam
	expires_vn = "Unknown"
	if expires != "Unknown":
		try:
			# Parse th·ªùi gian UTC
			utc_time = datetime.fromisoformat(expires.replace('Z', '+00:00'))
			# Chuy·ªÉn sang gi·ªù Vi·ªát Nam (UTC+7)
			vn_time = utc_time.astimezone(timezone(timedelta(hours=7)))
			# Format theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
			expires_vn = vn_time.strftime("%d/%m/%Y %H:%M:%S (UTC+7)")
		except (ValueError, TypeError):
			expires_vn = expires
	
	print(f"ƒê√£ l·∫•y token t·ª´ session:")
	print(f"  User: {user_name}")
	print(f"  Email: {user_email}")
	print(f"  H·∫øt h·∫°n: {expires_vn}")
	
	token = data.get("access_token")
	if isinstance(token, str) and token:
		return token
	return None


def sanitize_filename(filename: str) -> str:
	"""L√†m s·∫°ch t√™n file ƒë·ªÉ tr√°nh k√Ω t·ª± kh√¥ng h·ª£p l·ªá"""
	# Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá cho t√™n file
	filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
	# Lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng v√† tab
	filename = re.sub(r'[\n\r\t]', '_', filename)
	# Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
	filename = re.sub(r'\s+', ' ', filename)
	# Gi·ªõi h·∫°n ƒë·ªô d√†i t√™n file (Windows c√≥ gi·ªõi h·∫°n 255 k√Ω t·ª± cho ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß)
	# ƒê·ªÉ an to√†n, gi·ªõi h·∫°n ·ªü 100 k√Ω t·ª± cho t√™n file
	if len(filename) > 100:
		filename = filename[:100]
	return filename.strip()


def create_short_filename(stt: int, prompt: str) -> str:
	"""T·∫°o t√™n file ng·∫Øn g·ªçn t·ª´ STT v√† prompt"""
	# L·∫•y 50 k√Ω t·ª± ƒë·∫ßu c·ªßa prompt v√† l√†m s·∫°ch
	short_prompt = prompt[:50].strip()
	short_prompt = sanitize_filename(short_prompt)
	
	# T·∫°o t√™n file v·ªõi format: STT_short_description.mp4
	filename = f"{stt}_{short_prompt}.mp4"
	
	# ƒê·∫£m b·∫£o t√™n file kh√¥ng qu√° d√†i
	if len(filename) > 100:
		# N·∫øu v·∫´n qu√° d√†i, ch·ªâ l·∫•y STT v√† m·ªôt ph·∫ßn nh·ªè c·ªßa prompt
		short_prompt = short_prompt[:30]
		filename = f"{stt}_{short_prompt}.mp4"
	
	return filename


def read_excel_prompts(excel_file: str, require_image: bool = False) -> List[Tuple[int, str, Optional[str]]]:
	"""ƒê·ªçc file Excel v√† tr·∫£ v·ªÅ danh s√°ch (STT, PROMPT, IMAGE_PATH)"""
	try:
		df = pd.read_excel(excel_file)
		
		# Ki·ªÉm tra s·ªë c·ªôt
		if require_image:
			# Ch·∫ø ƒë·ªô Image + prompt c·∫ßn ƒë·ªß 3 c·ªôt
			if len(df.columns) < 3:
				print(f"\n‚ùå L·ªói: File Excel hi·ªán t·∫°i ch·ªâ c√≥ {len(df.columns)} c·ªôt")
				print("üìã Ch·∫ø ƒë·ªô Image + prompt c·∫ßn ƒë·ªß 3 c·ªôt:")
				print("   C·ªôt A: STT (1, 2, 3...)")
				print("   C·ªôt B: PROMPT (m√¥ t·∫£ video)")
				print("   C·ªôt C: IMAGE_PATH (ƒë∆∞·ªùng d·∫´n file image)")
				print("\nüí° H∆∞·ªõng d·∫´n:")
				print("   1. M·ªü file Excel")
				print("   2. Th√™m c·ªôt C v·ªõi ti√™u ƒë·ªÅ 'IMAGE_PATH'")
				print("   3. ƒêi·ªÅn ƒë∆∞·ªùng d·∫´n file image cho t·ª´ng d√≤ng")
				print("   4. Ch·∫°y l·∫°i ch∆∞∆°ng tr√¨nh")
				raise ValueError("File Excel thi·∫øu c·ªôt IMAGE_PATH. Vui l√≤ng th√™m c·ªôt C v·ªõi ƒë∆∞·ªùng d·∫´n image.")
			print("‚úì Ki·ªÉm tra Excel: ƒê·ªß 3 c·ªôt (STT, PROMPT, IMAGE_PATH)")
		else:
			# Ch·∫ø ƒë·ªô text-only c·∫ßn √≠t nh·∫•t 2 c·ªôt
			if len(df.columns) < 2:
				print(f"\n‚ùå L·ªói: File Excel hi·ªán t·∫°i ch·ªâ c√≥ {len(df.columns)} c·ªôt")
				print("üìã Ch·∫ø ƒë·ªô text-only c·∫ßn √≠t nh·∫•t 2 c·ªôt:")
				print("   C·ªôt A: STT (1, 2, 3...)")
				print("   C·ªôt B: PROMPT (m√¥ t·∫£ video)")
				raise ValueError("File Excel thi·∫øu c·ªôt PROMPT. Vui l√≤ng th√™m c·ªôt B v·ªõi prompt.")
			print("‚úì Ki·ªÉm tra Excel: ƒê·ªß 2 c·ªôt (STT, PROMPT)")
		
		prompts = []
		missing_images = []
		
		for index, row in df.iterrows():
			stt = row.iloc[0]  # C·ªôt A
			prompt = row.iloc[1]  # C·ªôt B
			image_path = row.iloc[2] if len(df.columns) > 2 else None  # C·ªôt C (n·∫øu c√≥)
			
			# B·ªè qua d√≤ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá
			if pd.isna(stt) or pd.isna(prompt):
				continue
			
			# Chuy·ªÉn ƒë·ªïi STT th√†nh int
			try:
				stt_int = int(stt)
			except (ValueError, TypeError):
				print(f"C·∫£nh b√°o: STT '{stt}' kh√¥ng h·ª£p l·ªá, b·ªè qua d√≤ng {index + 1}")
				continue
			
			# X·ª≠ l√Ω image_path
			image_path_str = None
			if not pd.isna(image_path) and str(image_path).strip():
				image_path_str = str(image_path).strip()
			
			# Ki·ªÉm tra image path n·∫øu y√™u c·∫ßu
			if require_image:
				if not image_path_str:
					missing_images.append(f"D√≤ng {index + 1} (STT {stt_int}): Thi·∫øu ƒë∆∞·ªùng d·∫´n image")
					continue
				if not os.path.exists(image_path_str):
					missing_images.append(f"D√≤ng {index + 1} (STT {stt_int}): File image kh√¥ng t·ªìn t·∫°i: {image_path_str}")
					continue
				if not image_path_str.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
					missing_images.append(f"D√≤ng {index + 1} (STT {stt_int}): File image kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: {image_path_str}")
					continue
			
			prompts.append((stt_int, str(prompt).strip(), image_path_str))
		
		# B√°o c√°o k·∫øt qu·∫£ ki·ªÉm tra
		if require_image and missing_images:
			print(f"\n‚ùå L·ªói ki·ªÉm tra Excel:")
			for error in missing_images:
				print(f"  {error}")
			raise ValueError(f"C√≥ {len(missing_images)} l·ªói trong file Excel. Vui l√≤ng s·ª≠a tr∆∞·ªõc khi ti·∫øp t·ª•c.")
		
		if require_image:
			print(f"‚úì Ki·ªÉm tra Excel: T·∫•t c·∫£ {len(prompts)} d√≤ng ƒë·ªÅu c√≥ image h·ª£p l·ªá")
		else:
			print(f"‚úì Ki·ªÉm tra Excel: ƒê√£ ƒë·ªçc {len(prompts)} prompt")
		
		return prompts
		
	except FileNotFoundError:
		print(f"\n‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file Excel: {excel_file}")
		exit(1)
	except ValueError as e:
		print(f"\n‚ùå L·ªói: {e}")
		exit(1)
	except Exception as e:
		print(f"\n‚ùå L·ªói ƒë·ªçc file Excel: {e}")
		exit(1)


def process_single_prompt(args: Tuple[int, str, Optional[str], str, str, str, str, Optional[Dict[str, str]], Optional[str]]) -> Tuple[int, str, bool, str]:
	"""X·ª≠ l√Ω m·ªôt prompt ƒë∆°n l·∫ª trong thread ri√™ng v·ªõi auto retry"""
	stt, prompt, image_path, token, project_id, model_key, output_dir, proxy, cookie_header_value = args
	
	# ƒê·ªçc c·∫•u h√¨nh retry t·ª´ config
	config = _load_config()
	retry_config = config.get("auto_retry", {})
	enable_auto_retry = retry_config.get("enable_auto_retry", True)
	max_retries = retry_config.get("max_retries", 3)
	base_delay = retry_config.get("base_delay", 2.0)
	max_delay = retry_config.get("max_delay", 30.0)
	backoff_factor = retry_config.get("backoff_factor", 2.0)
	
	def _process_prompt_internal():
		"""H√†m internal ƒë·ªÉ retry"""
		print(f"[Thread {threading.current_thread().name}] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω STT {stt}: {prompt[:50]}...")
		
		# T·∫°o t√™n file output ng·∫Øn g·ªçn
		output_filename = create_short_filename(stt, prompt)
		output_path = os.path.join(output_dir, output_filename)
		
		# Generate video
		if image_path and os.path.exists(image_path):
			# C√≥ image - upload image tr∆∞·ªõc, r·ªìi generate video t·ª´ image + prompt
			print(f"[Thread {threading.current_thread().name}] Upload image: {image_path}")
			media_id = upload_image(token, image_path, proxy)
			print(f"[Thread {threading.current_thread().name}] ‚úÖ Upload th√†nh c√¥ng - Media ID: {media_id}")
			
			# Generate video t·ª´ image + prompt
			print(f"[Thread {threading.current_thread().name}] üé¨ B·∫Øt ƒë·∫ßu t·∫°o video t·ª´ image + prompt...")
			gen_resp, scene_id = generate_video_from_image(token, prompt, media_id, project_id, model_key, proxy=proxy)
		else:
			# Kh√¥ng c√≥ image - generate video t·ª´ prompt only
			print(f"[Thread {threading.current_thread().name}] üé¨ B·∫Øt ƒë·∫ßu t·∫°o video t·ª´ prompt...")
			gen_resp, scene_id = generate_video(token, prompt, project_id, model_key, proxy=proxy)
			media_id = None
		
		op_name = extract_op_name(gen_resp)
		
		# Poll status
		print(f"[Thread {threading.current_thread().name}] ‚è≥ ƒêang ch·ªù video ƒë∆∞·ª£c t·∫°o...")
		status_resp = poll_status(token, op_name, scene_id, proxy=proxy)
		
		# Download video tr·ª±c ti·∫øp d∆∞·ªõi d·∫°ng MP4
		print(f"[Thread {threading.current_thread().name}] üì• ƒêang t·∫£i video...")
		fife_url = extract_fife_url(status_resp)
		http_download_mp4(fife_url, output_path, proxy)
		
		# Sau khi t·∫£i xong, n·∫øu c√≥ media_id (lu·ªìng image), th·ª±c hi·ªán x√≥a media tr√™n server
		try:
			if media_id and cookie_header_value:
				print(f"[Thread {threading.current_thread().name}] üßπ X√≥a media t·∫°m tr√™n server...")
				delete_media([media_id], cookie_header_value, proxy)
		except Exception as e:
			print(f"[Thread {threading.current_thread().name}] ‚ö† Kh√¥ng th·ªÉ x√≥a media: {e}")
		
		print(f"[Thread {threading.current_thread().name}] ‚úÖ Ho√†n th√†nh STT {stt}: {output_filename}")
		return (stt, prompt, True, output_filename)
	
	try:
		if enable_auto_retry:
			# S·ª≠ d·ª•ng auto retry v·ªõi c·∫•u h√¨nh t·ª´ config
			return auto_retry_with_backoff(
				_process_prompt_internal,
				max_retries=max_retries,
				base_delay=base_delay,
				max_delay=max_delay,
				backoff_factor=backoff_factor,
				retry_on_exceptions=(
					requests.exceptions.RequestException,
					requests.exceptions.Timeout,
					requests.exceptions.ConnectionError,
					requests.exceptions.HTTPError,
					Exception  # C√≥ th·ªÉ retry v·ªõi m·ªçi exception
				)
			)
		else:
			# Kh√¥ng s·ª≠ d·ª•ng auto retry, ch·∫°y tr·ª±c ti·∫øp
			return _process_prompt_internal()
	except Exception as e:
		print(f"[Thread {threading.current_thread().name}] ‚ùå L·ªói x·ª≠ l√Ω STT {stt} sau khi retry: {e}")
		return (stt, prompt, False, str(e))


def process_single_prompt_batch(prompt: str, token: str, project_id: str, 
                               model_key: str = "veo_3_0_t2v_fast_ultra", 
                               max_workers: int = 5, output_dir: str = "output", 
                               proxy: Optional[Dict[str, str]] = None,
                               cookie_header_value: Optional[str] = None) -> None:
	"""X·ª≠ l√Ω m·ªôt prompt duy nh·∫•t nh∆∞ng t·∫°o nhi·ªÅu video v·ªõi ƒëa lu·ªìng"""
	
	# ƒê·ªçc c·∫•u h√¨nh retry ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
	config = _load_config()
	retry_config = config.get("auto_retry", {})
	enable_auto_retry = retry_config.get("enable_auto_retry", True)
	max_retries = retry_config.get("max_retries", 3)
	
	# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
	os.makedirs(output_dir, exist_ok=True)
	
	# T·∫°o danh s√°ch prompts gi·ªëng nhau ƒë·ªÉ x·ª≠ l√Ω song song
	prompts = [(i+1, prompt, None) for i in range(max_workers)]
	
	print(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω prompt '{prompt}' v·ªõi {max_workers} lu·ªìng...")
	if enable_auto_retry:
		print(f"üîÑ Auto retry: B·∫¨T (t·ªëi ƒëa {max_retries} l·∫ßn retry cho m·ªói prompt)")
	else:
		print(f"üîÑ Auto retry: T·∫ÆT")
	
	# Chu·∫©n b·ªã arguments cho m·ªói thread
	args_list = [
		(stt, prompt, image_path, token, project_id, model_key, output_dir, proxy, cookie_header_value)
		for stt, prompt, image_path in prompts
	]
	
	# X·ª≠ l√Ω v·ªõi ThreadPoolExecutor
	results = []
	with ThreadPoolExecutor(max_workers=max_workers) as executor:
		# Submit t·∫•t c·∫£ tasks
		future_to_args = {executor.submit(process_single_prompt, args): args for args in args_list}
		
		# Thu th·∫≠p k·∫øt qu·∫£
		for future in as_completed(future_to_args):
			args = future_to_args[future]
			try:
				result = future.result()
				results.append(result)
			except Exception as e:
				stt, prompt = args[0], args[1]
				print(f"L·ªói kh√¥ng mong ƒë·ª£i v·ªõi STT {stt}: {e}")
				results.append((stt, prompt, False, str(e)))
	
	# B√°o c√°o k·∫øt qu·∫£
	successful = [r for r in results if r[2]]
	failed = [r for r in results if not r[2]]
	
	print(f"\n=== K·∫æT QU·∫¢ X·ª¨ L√ù ===")
	print(f"Th√†nh c√¥ng: {len(successful)}/{len(results)}")
	print(f"Th·∫•t b·∫°i: {len(failed)}/{len(results)}")
	
	if successful:
		print(f"\nC√°c file ƒë√£ t·∫°o th√†nh c√¥ng:")
		for stt, prompt, _, filename in successful:
			print(f"  STT {stt}: {filename}")
	
	if failed:
		print(f"\nC√°c prompt th·∫•t b·∫°i:")
		for stt, prompt, _, error in failed:
			print(f"  STT {stt}: {error}")


def process_single_image_batch(prompt: str, image_path: str, token: str, project_id: str, 
                              model_key: str = "veo_3_i2v_s_fast_ultra", 
                              max_workers: int = 5, output_dir: str = "output", 
                              proxy: Optional[Dict[str, str]] = None,
                              cookie_header_value: Optional[str] = None) -> None:
	"""X·ª≠ l√Ω m·ªôt prompt + image duy nh·∫•t nh∆∞ng t·∫°o nhi·ªÅu video v·ªõi ƒëa lu·ªìng"""
	
	# ƒê·ªçc c·∫•u h√¨nh retry ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
	config = _load_config()
	retry_config = config.get("auto_retry", {})
	enable_auto_retry = retry_config.get("enable_auto_retry", True)
	max_retries = retry_config.get("max_retries", 3)
	
	# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
	os.makedirs(output_dir, exist_ok=True)
	
	# T·∫°o danh s√°ch prompts gi·ªëng nhau ƒë·ªÉ x·ª≠ l√Ω song song
	prompts = [(i+1, prompt, image_path) for i in range(max_workers)]
	
	print(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω prompt '{prompt}' v·ªõi image '{image_path}' v√† {max_workers} lu·ªìng...")
	if enable_auto_retry:
		print(f"üîÑ Auto retry: B·∫¨T (t·ªëi ƒëa {max_retries} l·∫ßn retry cho m·ªói prompt)")
	else:
		print(f"üîÑ Auto retry: T·∫ÆT")
	
	# Chu·∫©n b·ªã arguments cho m·ªói thread
	args_list = [
		(stt, prompt, image_path, token, project_id, model_key, output_dir, proxy, cookie_header_value)
		for stt, prompt, image_path in prompts
	]
	
	# X·ª≠ l√Ω v·ªõi ThreadPoolExecutor
	results = []
	with ThreadPoolExecutor(max_workers=max_workers) as executor:
		# Submit t·∫•t c·∫£ tasks
		future_to_args = {executor.submit(process_single_prompt, args): args for args in args_list}
		
		# Thu th·∫≠p k·∫øt qu·∫£
		for future in as_completed(future_to_args):
			args = future_to_args[future]
			try:
				result = future.result()
				results.append(result)
			except Exception as e:
				stt, prompt = args[0], args[1]
				print(f"L·ªói kh√¥ng mong ƒë·ª£i v·ªõi STT {stt}: {e}")
				results.append((stt, prompt, False, str(e)))
	
	# B√°o c√°o k·∫øt qu·∫£
	successful = [r for r in results if r[2]]
	failed = [r for r in results if not r[2]]
	
	print(f"\n=== K·∫æT QU·∫¢ X·ª¨ L√ù ===")
	print(f"Th√†nh c√¥ng: {len(successful)}/{len(results)}")
	print(f"Th·∫•t b·∫°i: {len(failed)}/{len(results)}")
	
	if successful:
		print(f"\nC√°c file ƒë√£ t·∫°o th√†nh c√¥ng:")
		for stt, prompt, _, filename in successful:
			print(f"  STT {stt}: {filename}")
	
	if failed:
		print(f"\nC√°c prompt th·∫•t b·∫°i:")
		for stt, prompt, _, error in failed:
			print(f"  STT {stt}: {error}")


def process_excel_batch(excel_file: str, token: str, project_id: str, 
                       model_key: str = "veo_3_0_t2v_fast_ultra", 
                       max_workers: int = 5, output_dir: str = "output", 
                       require_image: bool = False, proxy: Optional[Dict[str, str]] = None, 
                       cookie_header_value: Optional[str] = None) -> None:
	"""X·ª≠ l√Ω batch t·ª´ file Excel v·ªõi ƒëa lu·ªìng"""
	
	# ƒê·ªçc c·∫•u h√¨nh retry ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
	config = _load_config()
	retry_config = config.get("auto_retry", {})
	enable_auto_retry = retry_config.get("enable_auto_retry", True)
	max_retries = retry_config.get("max_retries", 3)
	
	# T·∫°o th∆∞ m·ª•c output n·∫øu ch∆∞a c√≥
	os.makedirs(output_dir, exist_ok=True)
	
	# ƒê·ªçc prompts t·ª´ Excel v·ªõi ki·ªÉm tra image n·∫øu c·∫ßn
	try:
		prompts = read_excel_prompts(excel_file, require_image)
	except SystemExit:
		return  # ƒê√£ hi·ªÉn th·ªã l·ªói v√† tho√°t trong read_excel_prompts
	
	if not prompts:
		print("Kh√¥ng c√≥ prompt n√†o ƒë·ªÉ x·ª≠ l√Ω")
		return
	
	print(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω {len(prompts)} prompt v·ªõi {max_workers} lu·ªìng...")
	if enable_auto_retry:
		print(f"üîÑ Auto retry: B·∫¨T (t·ªëi ƒëa {max_retries} l·∫ßn retry cho m·ªói prompt)")
	else:
		print(f"üîÑ Auto retry: T·∫ÆT")
	
	# Chu·∫©n b·ªã arguments cho m·ªói thread
	args_list = [
		(stt, prompt, image_path, token, project_id, model_key, output_dir, proxy, cookie_header_value)
		for stt, prompt, image_path in prompts
	]
	
	# X·ª≠ l√Ω v·ªõi ThreadPoolExecutor
	results = []
	with ThreadPoolExecutor(max_workers=max_workers) as executor:
		# Submit t·∫•t c·∫£ tasks
		future_to_args = {executor.submit(process_single_prompt, args): args for args in args_list}
		
		# Thu th·∫≠p k·∫øt qu·∫£
		for future in as_completed(future_to_args):
			args = future_to_args[future]
			try:
				result = future.result()
				results.append(result)
			except Exception as e:
				stt, prompt = args[0], args[1]
				print(f"L·ªói kh√¥ng mong ƒë·ª£i v·ªõi STT {stt}: {e}")
				results.append((stt, prompt, False, str(e)))
	
	# B√°o c√°o k·∫øt qu·∫£
	successful = [r for r in results if r[2]]
	failed = [r for r in results if not r[2]]
	
	print(f"\n=== K·∫æT QU·∫¢ X·ª¨ L√ù ===")
	print(f"Th√†nh c√¥ng: {len(successful)}/{len(results)}")
	print(f"Th·∫•t b·∫°i: {len(failed)}/{len(results)}")
	
	if successful:
		print(f"\nC√°c file ƒë√£ t·∫°o th√†nh c√¥ng:")
		for stt, prompt, _, filename in successful:
			print(f"  STT {stt}: {filename}")
	
	if failed:
		print(f"\nC√°c prompt th·∫•t b·∫°i:")
		for stt, prompt, _, error in failed:
			print(f"  STT {stt}: {error}")


def get_user_input():
	"""L·∫•y input t·ª´ ng∆∞·ªùi d√πng qua command line"""
	print("=== C·∫§U H√åNH X·ª¨ L√ù VIDEO ===")
	
	# Ch·ªçn ch·∫ø ƒë·ªô
	print("\n1. Prompt to video (text-only)")
	print("2. Image + prompt to video")
	
	while True:
		try:
			mode = input("\nCh·ªçn ch·∫ø ƒë·ªô (1 ho·∫∑c 2): ").strip()
			if mode in ["1", "2"]:
				break
			else:
				print("Vui l√≤ng ch·ªçn 1 ho·∫∑c 2")
		except KeyboardInterrupt:
			print("\nƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
			exit(0)
	
	if mode == "1":
		# Ch·∫ø ƒë·ªô Prompt to video (text-only)
		# H·ªèi xem mu·ªën x·ª≠ l√Ω Excel hay ƒë∆°n l·∫ª
		print("\nCh·ªçn c√°ch x·ª≠ l√Ω:")
		print("a. X·ª≠ l√Ω t·ª´ file Excel (nhi·ªÅu prompt)")
		print("b. X·ª≠ l√Ω ƒë∆°n l·∫ª (1 prompt)")
		
		while True:
			sub_mode = input("\nCh·ªçn (a ho·∫∑c b): ").strip().lower()
			if sub_mode in ["a", "b"]:
				break
			else:
				print("Vui l√≤ng ch·ªçn a ho·∫∑c b")
		
		if sub_mode == "a":
			# Excel mode
			while True:
				excel_file = input("\nNh·∫≠p ƒë∆∞·ªùng d·∫´n file Excel: ").strip()
				if not excel_file:
					print("Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file Excel")
					continue
				if not os.path.exists(excel_file):
					print(f"File kh√¥ng t·ªìn t·∫°i: {excel_file}")
					continue
				if not excel_file.lower().endswith(('.xlsx', '.xls')):
					print("File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx ho·∫∑c .xls")
					continue
				break
			
			while True:
				try:
					max_workers_input = input("\nNh·∫≠p s·ªë lu·ªìng x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh 5): ").strip()
					if not max_workers_input:
						max_workers = 5
						break
					max_workers = int(max_workers_input)
					if max_workers < 1 or max_workers > 20:
						print("S·ªë lu·ªìng ph·∫£i t·ª´ 1 ƒë·∫øn 20")
						continue
					break
				except ValueError:
					print("Vui l√≤ng nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá")
			
			output_dir = input("\nNh·∫≠p th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh 'output'): ").strip()
			if not output_dir:
				output_dir = "output"
			
			return {
				"mode": "excel",
				"excel_file": excel_file,
				"max_workers": max_workers,
				"output_dir": output_dir
			}
		else:
			# Single mode - nh∆∞ng v·∫´n d√πng ƒëa lu·ªìng
			prompt = input("\nNh·∫≠p prompt: ").strip()
			if not prompt:
				prompt = "Kaela standing before the mysterious pod..."
			
			while True:
				try:
					max_workers_input = input("\nNh·∫≠p s·ªë lu·ªìng x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh 5): ").strip()
					if not max_workers_input:
						max_workers = 5
						break
					max_workers = int(max_workers_input)
					if max_workers < 1 or max_workers > 20:
						print("S·ªë lu·ªìng ph·∫£i t·ª´ 1 ƒë·∫øn 20")
						continue
					break
				except ValueError:
					print("Vui l√≤ng nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá")
			
			output_dir = input("\nNh·∫≠p th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh 'output'): ").strip()
			if not output_dir:
				output_dir = "output"
			
			return {
				"mode": "single_batch",
				"prompt": prompt,
				"max_workers": max_workers,
				"output_dir": output_dir
			}
	else:
		# Ch·∫ø ƒë·ªô Image + prompt to video
		# H·ªèi xem mu·ªën x·ª≠ l√Ω Excel hay ƒë∆°n l·∫ª
		print("\nCh·ªçn c√°ch x·ª≠ l√Ω:")
		print("a. X·ª≠ l√Ω t·ª´ file Excel (nhi·ªÅu prompt + image)")
		print("b. X·ª≠ l√Ω ƒë∆°n l·∫ª (1 prompt + 1 image)")
		
		while True:
			sub_mode = input("\nCh·ªçn (a ho·∫∑c b): ").strip().lower()
			if sub_mode in ["a", "b"]:
				break
			else:
				print("Vui l√≤ng ch·ªçn a ho·∫∑c b")
		
		if sub_mode == "a":
			# Excel mode v·ªõi image
			while True:
				excel_file = input("\nNh·∫≠p ƒë∆∞·ªùng d·∫´n file Excel: ").strip()
				if not excel_file:
					print("Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file Excel")
					continue
				if not os.path.exists(excel_file):
					print(f"File kh√¥ng t·ªìn t·∫°i: {excel_file}")
					continue
				if not excel_file.lower().endswith(('.xlsx', '.xls')):
					print("File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx ho·∫∑c .xls")
					continue
				break
			
			while True:
				try:
					max_workers_input = input("\nNh·∫≠p s·ªë lu·ªìng x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh 5): ").strip()
					if not max_workers_input:
						max_workers = 5
						break
					max_workers = int(max_workers_input)
					if max_workers < 1 or max_workers > 20:
						print("S·ªë lu·ªìng ph·∫£i t·ª´ 1 ƒë·∫øn 20")
						continue
					break
				except ValueError:
					print("Vui l√≤ng nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá")
			
			output_dir = input("\nNh·∫≠p th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh 'output'): ").strip()
			if not output_dir:
				output_dir = "output"
			
			return {
				"mode": "excel_image",
				"excel_file": excel_file,
				"max_workers": max_workers,
				"output_dir": output_dir
			}
		else:
			# Single mode v·ªõi image - nh∆∞ng v·∫´n d√πng ƒëa lu·ªìng
			prompt = input("\nNh·∫≠p prompt: ").strip()
			if not prompt:
				prompt = "A beautiful sunset over the ocean"
			
			while True:
				image_path = input("\nNh·∫≠p ƒë∆∞·ªùng d·∫´n file image: ").strip()
				if not image_path:
					print("Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file image")
					continue
				if not os.path.exists(image_path):
					print(f"File kh√¥ng t·ªìn t·∫°i: {image_path}")
					continue
				if not image_path.lower().endswith(('.jpg', '.jpeg', '.png', '.gif', '.webp')):
					print("File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .jpg, .jpeg, .png, .gif ho·∫∑c .webp")
					continue
				break
			
			while True:
				try:
					max_workers_input = input("\nNh·∫≠p s·ªë lu·ªìng x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh 5): ").strip()
					if not max_workers_input:
						max_workers = 5
						break
					max_workers = int(max_workers_input)
					if max_workers < 1 or max_workers > 20:
						print("S·ªë lu·ªìng ph·∫£i t·ª´ 1 ƒë·∫øn 20")
						continue
					break
				except ValueError:
					print("Vui l√≤ng nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá")
			
			output_dir = input("\nNh·∫≠p th∆∞ m·ª•c output (m·∫∑c ƒë·ªãnh 'output'): ").strip()
			if not output_dir:
				output_dir = "output"
			
			return {
				"mode": "single_image_batch",
				"prompt": prompt,
				"image_path": image_path,
				"max_workers": max_workers,
				"output_dir": output_dir
			}


def main():

	text = r"""
 __     _______ ___    _____      _    ___ 
 \ \   / / ____/ _ \  |___ /     / \  |_ _|
  \ \ / /|  _|| | | |   |_ \    / _ \  | | 
   \ V / | |__| |_| |  ___) |  / ___ \ | | 
    \_/  |_____\___/  |____/  /_/   \_\___|
	"""
	print(text)

	# Input qua env ho·∫∑c file
	token = os.getenv("AISANDBOX_TOKEN") or ""
	token_file = os.getenv("AISANDBOX_TOKEN_FILE") or "token.txt"
	cookie_file = os.getenv("AISANDBOX_COOKIE_FILE") or "cookie.txt"
	if not token:
		file_token = _read_token_from_file(token_file)
		if file_token:
			token = file_token
	# N·∫øu v·∫´n ch∆∞a c√≥ token, th·ª≠ g·ªçi session b·∫±ng cookie.txt
	if not token:
		cookie_header_value = _read_cookie_header_from_file(cookie_file)
		if cookie_header_value:
			try:
				# ƒê·ªçc proxy t·∫°m th·ªùi ƒë·ªÉ l·∫•y token (kh√¥ng test connection ƒë·ªÉ tr√°nh delay)
				proxy_file = os.getenv("AISANDBOX_PROXY_FILE") or "proxy.txt"
				temp_proxy = _read_proxy_from_file(proxy_file, test_connection=False)
				session_token = fetch_access_token_from_session(cookie_header_value, temp_proxy)
				if session_token:
					token = session_token
			except requests.HTTPError:
				pass

	if not token:
		raise RuntimeError("Thi·∫øu token. ƒê·∫∑t AISANDBOX_TOKEN ho·∫∑c t·∫°o file token.txt")

	# C·∫•u h√¨nh chung
	config = _load_config()
	project_id = os.getenv("AISANDBOX_PROJECT_ID") or config.get("project_id", "66a1a7a3-c9d9-4c42-a07e-44f2baecf60b")
	model_key = os.getenv("AISANDBOX_MODEL_KEY") or config.get("model_key", "veo_3_0_t2v_fast_ultra")
	
	# ƒê·ªçc proxy t·ª´ file v·ªõi test connection
	proxy_file = os.getenv("AISANDBOX_PROXY_FILE") or "proxy.txt"
	proxy = _read_proxy_from_file(proxy_file, test_connection=True)
	if proxy:
		print("‚úì ƒê√£ t·∫£i v√† test proxy th√†nh c√¥ng")
	else:
		print("‚ö† Kh√¥ng s·ª≠ d·ª•ng proxy (file kh√¥ng t·ªìn t·∫°i ho·∫∑c proxy kh√¥ng ho·∫°t ƒë·ªông)")
	
	# Th√¥ng b√°o v·ªÅ c√°c th√¥ng s·ªë gi·∫£ l·∫≠p
	print("‚úì ƒê√£ k√≠ch ho·∫°t c√°c th√¥ng s·ªë gi·∫£ l·∫≠p tr√¨nh duy·ªát th·∫≠t:")
	print("  - User-Agent ng·∫´u nhi√™n")
	print("  - Headers gi·∫£ l·∫≠p tr√¨nh duy·ªát")
	print("  - Fingerprint gi·∫£ l·∫≠p")
	print("  - Delay ng·∫´u nhi√™n gi·ªØa c√°c request")
	print("  - Session gi·∫£ l·∫≠p")
	
	# L·∫•y input t·ª´ ng∆∞·ªùi d√πng
	user_config = get_user_input()
	
	if user_config["mode"] == "excel":
		# Ch·∫ø ƒë·ªô Excel - x·ª≠ l√Ω batch
		excel_file = user_config["excel_file"]
		max_workers = user_config["max_workers"]
		output_dir = user_config["output_dir"]
		
		print(f"\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ===")
		print(f"File Excel: {excel_file}")
		print(f"S·ªë lu·ªìng: {max_workers}")
		print(f"Th∆∞ m·ª•c output: {output_dir}")
		
		process_excel_batch(excel_file, token, project_id, model_key, max_workers, output_dir, require_image=False, proxy=proxy, cookie_header_value=cookie_header_value)
	elif user_config["mode"] == "excel_image":
		# Ch·∫ø ƒë·ªô Excel v·ªõi image - x·ª≠ l√Ω batch
		excel_file = user_config["excel_file"]
		max_workers = user_config["max_workers"]
		output_dir = user_config["output_dir"]
		
		print(f"\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ===")
		print(f"File Excel: {excel_file}")
		print(f"S·ªë lu·ªìng: {max_workers}")
		print(f"Th∆∞ m·ª•c output: {output_dir}")
		
		process_excel_batch(excel_file, token, project_id, "veo_3_i2v_s_fast_ultra", max_workers, output_dir, require_image=True, proxy=proxy, cookie_header_value=cookie_header_value)
	elif user_config["mode"] == "single_batch":
		# Ch·∫ø ƒë·ªô ƒë∆°n l·∫ª v·ªõi ƒëa lu·ªìng - x·ª≠ l√Ω m·ªôt prompt (text only)
		prompt = user_config["prompt"]
		max_workers = user_config["max_workers"]
		output_dir = user_config["output_dir"]

		print(f"\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ===")
		print(f"Prompt: {prompt}")
		print(f"S·ªë lu·ªìng: {max_workers}")
		print(f"Th∆∞ m·ª•c output: {output_dir}")

		process_single_prompt_batch(prompt, token, project_id, model_key, max_workers, output_dir, proxy=proxy, cookie_header_value=cookie_header_value)
	elif user_config["mode"] == "single_image_batch":
		# Ch·∫ø ƒë·ªô ƒë∆°n l·∫ª v·ªõi image v√† ƒëa lu·ªìng - x·ª≠ l√Ω m·ªôt prompt + image
		prompt = user_config["prompt"]
		image_path = user_config["image_path"]
		max_workers = user_config["max_workers"]
		output_dir = user_config["output_dir"]

		print(f"\n=== B·∫ÆT ƒê·∫¶U X·ª¨ L√ù ===")
		print(f"Prompt: {prompt}")
		print(f"Image: {image_path}")
		print(f"S·ªë lu·ªìng: {max_workers}")
		print(f"Th∆∞ m·ª•c output: {output_dir}")

		process_single_image_batch(prompt, image_path, token, project_id, "veo_3_i2v_s_fast_ultra", max_workers, output_dir, proxy=proxy, cookie_header_value=cookie_header_value)


# === UTILITY FUNCTIONS ===
def ensure_dir(path):
    """Ensure directory exists"""
    if not os.path.exists(path):
        os.makedirs(path)

def center_line(text, width=70):
    """Center text within given width"""
    return text.center(width)

def print_box(info):
    """Print authentication info in a formatted box"""
    box_width = 70
    print("‚ïî" + "‚ïê" * (box_width - 2) + "‚ïó")
    print("‚ïë" + center_line("üîê X√ÅC TH·ª∞C KEY TH√ÄNH C√îNG", box_width - 2) + "‚ïë")
    print("‚ï†" + "‚ïê" * (box_width - 2) + "‚ï£")
    print("‚ïë" + center_line(f"üîë KEY       : {info.get('key')}", box_width - 2) + "‚ïë")
    print("‚ïë" + center_line(f"üìÖ H·∫øt h·∫°n    : {info.get('expires')}", box_width - 2) + "‚ïë")
    print("‚ïë" + center_line(f"üîÅ S·ªë l∆∞·ª£t    : {info.get('remaining')}", box_width - 2) + "‚ïë")
    print("‚ï†" + "‚ïê" * (box_width - 2) + "‚ï£")
    print("‚ïë" + center_line("üß† Info dev @huyit32", box_width - 2) + "‚ïë")
    print("‚ïë" + center_line("üìß qhuy.dev@gmail.com", box_width - 2) + "‚ïë")
    print("‚ïö" + "‚ïê" * (box_width - 2) + "‚ïù")

# === MAIN EXECUTION ===
if __name__ == "__main__":
    API_AUTH = f"{API_URL}/api/make_video_ai/auth"
    MAX_RETRIES = 5

    print("\nüìå X√ÅC TH·ª∞C KEY ƒê·ªÇ S·ª¨ D·ª§NG C√îNG C·ª§ - VEO3 AI\n")

    for attempt in range(1, MAX_RETRIES + 1):
        key = input(f"üîë Nh·∫≠p API Key (L·∫ßn {attempt}/{MAX_RETRIES}): ").strip()
        success, message, info = check_key_online(key, API_AUTH)

        if success:
            print("\n" + message + "\n")
            print_box(info)
            print()

            run_now = input("‚ñ∂Ô∏è  B·∫°n c√≥ mu·ªën ch·∫°y ch∆∞∆°ng tr√¨nh ngay b√¢y gi·ªù kh√¥ng? (Y/n): ").strip().lower()
            if run_now in ("", "y", "yes"):
                print("üöÄ Kh·ªüi ƒë·ªông VEO3 AI...")
                main()
            else:
                print("‚úã B·∫°n ƒë√£ ch·ªçn kh√¥ng ch·∫°y ch∆∞∆°ng tr√¨nh. Tho√°t.")
            break
        else:
            print(f"\n {message}")
            if attempt < MAX_RETRIES:
                print("‚Ü©Ô∏è  Vui l√≤ng th·ª≠ l·∫°i...\n")
                time.sleep(1)
            else:
                print("\nüö´ ƒê√£ nh·∫≠p sai qu√° 5 l·∫ßn. Tho√°t ch∆∞∆°ng tr√¨nh.")
                print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                print("üß† Info dev @huyit32 | üìß qhuy.dev@gmail.com")
                print("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                sys.exit(1)