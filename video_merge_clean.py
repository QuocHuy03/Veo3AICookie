# Ph∆∞∆°ng ph√°p gh√©p video thay th·∫ø FFmpeg

import os
import sys
import subprocess
import platform

# Import c√°c th∆∞ vi·ªán gh√©p video thay th·∫ø
try:
    from moviepy.editor import VideoFileClip, concatenate_videoclips
    MOVIEPY_AVAILABLE = True
except ImportError:
    MOVIEPY_AVAILABLE = False

try:
    import cv2
    import numpy as np
    OPENCV_AVAILABLE = True
except ImportError:
    OPENCV_AVAILABLE = False

def merge_videos_moviepy(video_paths, output_path):
    """Gh√©p video s·ª≠ d·ª•ng MoviePy"""
    if not MOVIEPY_AVAILABLE:
        print("‚ö†Ô∏è MoviePy kh√¥ng c√≥ s·∫µn!")
        return False
    
    try:
        print("üé¨ S·ª≠ d·ª•ng MoviePy ƒë·ªÉ gh√©p video...")
        
        # Load c√°c video clips
        clips = []
        for i, video_path in enumerate(video_paths):
            print(f"üìπ ƒêang load video {i+1}/{len(video_paths)}...")
            clip = VideoFileClip(video_path)
            clips.append(clip)
        
        # Gh√©p video
        print("üîó ƒêang gh√©p video...")
        final_clip = concatenate_videoclips(clips)
        
        # Xu·∫•t video
        print("üíæ ƒêang xu·∫•t video...")
        final_clip.write_videofile(output_path, 
                                 codec='libx264', 
                                 audio_codec='aac',
                                 temp_audiofile='temp-audio.m4a',
                                 remove_temp=True)
        
        # Cleanup
        final_clip.close()
        for clip in clips:
            clip.close()
        
        print("‚úÖ Gh√©p video th√†nh c√¥ng v·ªõi MoviePy!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói MoviePy: {str(e)}")
        return False

def merge_videos_opencv(video_paths, output_path):
    """Gh√©p video s·ª≠ d·ª•ng OpenCV"""
    if not OPENCV_AVAILABLE:
        print("‚ö†Ô∏è OpenCV kh√¥ng c√≥ s·∫µn!")
        return False
    
    try:
        print("üé• S·ª≠ d·ª•ng OpenCV ƒë·ªÉ gh√©p video...")
        
        # L·∫•y th√¥ng tin video ƒë·∫ßu ti√™n
        cap = cv2.VideoCapture(video_paths[0])
        fps = int(cap.get(cv2.CAP_PROP_FPS))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        cap.release()
        
        # T·∫°o video writer
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))
        
        # Gh√©p t·ª´ng video
        for i, video_path in enumerate(video_paths):
            print(f"üìπ ƒêang x·ª≠ l√Ω video {i+1}/{len(video_paths)}...")
            
            cap = cv2.VideoCapture(video_path)
            while True:
                ret, frame = cap.read()
                if not ret:
                    break
                out.write(frame)
            cap.release()
        
        out.release()
        print("‚úÖ Gh√©p video th√†nh c√¥ng v·ªõi OpenCV!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói OpenCV: {str(e)}")
        return False

def merge_videos_ffmpeg(video_paths, output_path):
    """Gh√©p video s·ª≠ d·ª•ng FFmpeg"""
    try:
        print("üéûÔ∏è S·ª≠ d·ª•ng FFmpeg ƒë·ªÉ gh√©p video...")
        
        # T·∫°o file list
        import tempfile
        concat_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
        for video_path in video_paths:
            escaped_path = video_path.replace("'", "'\"'\"'").replace("\\", "\\\\")
            concat_file.write(f"file '{escaped_path}'\n")
        concat_file.close()
        
        # Gh√©p video v·ªõi FFmpeg
        cmd = ["ffmpeg", "-y", "-f", "concat", "-safe", "0", "-i", concat_file.name,
               "-c:v", "libx264", "-c:a", "aac", "-preset", "fast", "-crf", "23",
               output_path]
        
        # ·∫®n c·ª≠a s·ªï CMD tr√™n Windows
        startupinfo = None
        if platform.system() == "Windows":
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            startupinfo.wShowWindow = subprocess.SW_HIDE
        
        result = subprocess.run(cmd, capture_output=True, text=True, startupinfo=startupinfo)
        
        # Cleanup
        try:
            os.unlink(concat_file.name)
        except:
            pass
        
        if result.returncode == 0:
            print("‚úÖ Gh√©p video th√†nh c√¥ng v·ªõi FFmpeg!")
            return True
        else:
            print(f"‚ùå L·ªói FFmpeg: {result.stderr[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói FFmpeg: {str(e)}")
        return False

def merge_videos(video_paths, output_path):
    """Gh√©p video s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p t·ªët nh·∫•t c√≥ s·∫µn"""
    print(f"üöÄ B·∫Øt ƒë·∫ßu gh√©p {len(video_paths)} video...")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    for i, video_path in enumerate(video_paths):
        if not os.path.exists(video_path):
            print(f"‚ùå Video {i+1} kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False
    
    print("‚úÖ T·∫•t c·∫£ video files h·ª£p l·ªá")
    
    # Th·ª≠ c√°c ph∆∞∆°ng ph√°p theo th·ª© t·ª± ∆∞u ti√™n
    methods = [
        ("MoviePy", merge_videos_moviepy),
        ("OpenCV", merge_videos_opencv),
        ("FFmpeg", merge_videos_ffmpeg)
    ]
    
    for method_name, method_func in methods:
        print(f"\nüîÑ Th·ª≠ ph∆∞∆°ng ph√°p {method_name}...")
        if method_func(video_paths, output_path):
            print(f"‚úÖ Th√†nh c√¥ng v·ªõi {method_name}!")
            return True
        else:
            print(f"‚ùå Th·∫•t b·∫°i v·ªõi {method_name}")
    
    print("‚ùå T·∫•t c·∫£ ph∆∞∆°ng ph√°p ƒë·ªÅu th·∫•t b·∫°i!")
    return False

if __name__ == "__main__":
    # Test v·ªõi video paths
    video_paths = [
        "video1.mp4",
        "video2.mp4",
        "video3.mp4"
    ]
    output_path = "merged_video.mp4"
    
    success = merge_videos(video_paths, output_path)
    if success:
        print(f"üéâ Video ƒë√£ ƒë∆∞·ª£c gh√©p th√†nh c√¥ng: {output_path}")
    else:
        print("üòû Kh√¥ng th·ªÉ gh√©p video!")